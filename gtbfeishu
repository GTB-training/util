_gtb_feishu_refresh_assignment_process() {
    _gtb_feishu_token

    local -r SPREADSHEET_ID="shtcnL3CkMHvdKD2Lz4hS4qESmd"
    local -r SHEET_ID="e24376"
    local -r PUT_SHEET_URL="$GTB_FEISHU_API/sheets/v2/spreadsheets/$SPREADSHEET_ID/values"
    local -r RANGE="\"$SHEET_ID!A2:Z900\""
    local -r DATA="${1:?request data is required!}"
    local -r TENANT_ACCESS_TOKEN=$(cat "$GTB_FEISHU_TENANT_ACCESS_TOKEN_FILE")
    local -r REQUEST_BODY=$(cat <<EOF
{
    "valueRange":{
        "range": $RANGE,
        "values": $DATA
    }
}
EOF
)
    RESPONSE=$(echo -n "$REQUEST_BODY" |
      http --follow --timeout 10 PUT $PUT_SHEET_URL \
      Authorization:"Bearer $TENANT_ACCESS_TOKEN" \
      Content-Type:'application/json'
    )
    RESULT=$(echo "$RESPONSE" | jq -r ".msg")
    [[ "$RESULT" == "success" ]] || echo "Failed to update process sheet."
}

_gtb_feishu_token() {
    local -r GTB_FEISHU_TOKEN_URL="${GTB_FEISHU_API}${GTB_FEISHU_TOKEN_ENDPOINT}"

    [[ -s $GTB_FEISHU_TENANT_ACCESS_TOKEN_FILE ]] || echo "placeholder" > "$GTB_FEISHU_TENANT_ACCESS_TOKEN_FILE"

    run "http --ignore-stdin --form --follow --timeout 10 POST $GTB_FEISHU_TOKEN_URL \
     'app_id'="$FEISHU_APP_KEY" \
     'app_secret'="$FEISHU_APP_SECRET" \
     Content-Type:'application/x-www-form-urlencoded'" |
      jq -r ".tenant_access_token" > "$GTB_FEISHU_TENANT_ACCESS_TOKEN_FILE"
}

_gtb_feishu_message() {
    local -r GROUP_ID="${1:?Feishu chat ID is required!}"
    local -r MESSAGE_TYPE="${2:?Message type is required!(e.g. interactive,text,...)}"
    local -r CONTENT="${3:?Message content is required!}"

    _gtb_feishu_token
    local -r TENANT_ACCESS_TOKEN=$(cat "$GTB_FEISHU_TENANT_ACCESS_TOKEN_FILE")

    local -r REQUEST_GROUP_ID="\"$GROUP_ID\""
    local -r REQUEST_MESSAGE_TYPE="\"$MESSAGE_TYPE\""
    local -r REQUEST_CONTENT="\"$CONTENT\""
    local -r REQUEST_BODY=$(cat <<EOF
{
    "receive_id": $REQUEST_GROUP_ID,
    "msg_type": $REQUEST_MESSAGE_TYPE,
    "content": $REQUEST_CONTENT
}
EOF
)

    RESPONSE=$(printf "$REQUEST_BODY" |
          http --follow --timeout 10 POST "$GTB_FEISHU_API/im/v1/messages?receive_id_type=chat_id" \
          Authorization:"Bearer $TENANT_ACCESS_TOKEN" \
          Content-Type:'application/json'
        )
    RESULT=$(echo "$RESPONSE" | jq -r ".msg")
    [[ "$RESULT" == "ok" ]] && echo "DONE" || echo "Failed to send message."
}

_gtb_feishu_group_joining_process() {
  local -r GTB_DEV_2023_GROUP_ID="${1:?Feishu chat ID is required!}"
  local -r TMP_STUDENTS_FILE="/tmp/gtb-report-group-joining-process-$$"

  _gtb_feishu_token

  local -r TENANT_ACCESS_TOKEN=$(cat "$GTB_FEISHU_TENANT_ACCESS_TOKEN_FILE")
  while true; do
    GET_GROUP_MEMBERS_URL="$GTB_FEISHU_API/im/v1/chats/$GTB_DEV_2023_GROUP_ID/members?page_size=100&page_token=$PAGE_TOKEN"
    RESPONSE=$(http --follow --timeout 10 GET ${GET_GROUP_MEMBERS_URL} Authorization:"Bearer $TENANT_ACCESS_TOKEN")
    HAS_MORE=$(echo "$RESPONSE" | jq -r '.data.has_more')
    PAGE_TOKEN=$(echo "$RESPONSE" | jq -r '.data.page_token')
    echo $RESPONSE | jq -r '.data.items[].name' | awk '{FS="\""} {print $1}' >> $TMP_STUDENTS_FILE

    [[ $HAS_MORE != "false" ]] || break
  done

  cat $TMP_STUDENTS_FILE
}

_gtb_feishu_uploadImg() {
    local -r IMG_PATH="${1:?image path is required!}"

    _gtb_feishu_token
    local -r TENANT_ACCESS_TOKEN=$(cat "$GTB_FEISHU_TENANT_ACCESS_TOKEN_FILE")

    RESPONSE=$(http --form --follow --timeout 10 POST 'https://open.feishu.cn/open-apis/im/v1/images' \
                    image_type='message' \
                    image@"$IMG_PATH" \
                    Content-Type:'multipart/form-data' \
                    Authorization:"Bearer $TENANT_ACCESS_TOKEN" )

   RESULT=$(echo "$RESPONSE" | jq -r ".code")
       [[ "$RESULT" == "0" ]] || echo "Failed to upload img."

   echo "$RESPONSE" | jq -r ".data.image_key"
}

_gtb_feishu_word() {
    local -r REPO_NAME="sd-words"
    local -r GROUP_ID="oc_dbf3198d67e38dd67b6c3af7cc24edda"
    local -r TYPE="interactive"

    # 下载repo
    _gtb_clone_default_repo $REPO_NAME

    # 确定哪个文件夹（单词）
    local REPO_DIR=$(_gtb_default_repo_dir $REPO_NAME)
    local INBOX_DIR="$REPO_DIR/inbox"
    local DONE_DIR="$REPO_DIR/done"
    local TARGET_FOLDER=$(ls -d $INBOX_DIR/* | head -n1)
    local TARGET_NAME=$(basename $TARGET_FOLDER)

    echo "find word in inbox: $TARGET_FOLDER"

    # 上传文件夹中的图片，如果有
    local IMAGE_KEY='img_v2_28145135-7649-49a1-b9ef-084a446ca03g'
    if find $TARGET_FOLDER -iname "banner.*"
    then
        img_file=$(find $TARGET_FOLDER -iname "banner.*" | xargs -0 echo)
        echo "img_file: $img_file"
        IMAGE_KEY=`_gtb_feishu_uploadImg "$img_file"`
        echo "image_key: $IMAGE_KEY"
    else
        echo "banner.png not found, use default image"
    fi

    # 获取文件内容，拼接 content
    local -r TEMPLATE_ID="ctp_AAYdKKc3HnXx"
    local -r DEFAULT_VALUE="暂无"

    #local SCENE_CONTENT=$(cat $TARGET_FOLDER/scene.md | sed -e ':a' -e 'N' -e '$!ba' -e 's/\n/\\\\\\\\n/g')
    local SCENE_CONTENT=$(cat $TARGET_FOLDER/scene.md | sed 's/$/\\\\\\\\n/g')
    SCENE_VALUE=${SCENE_CONTENT:-$DEFAULT_VALUE}

    local DEFINITION_CONTENT=$(cat $TARGET_FOLDER/definition.md | sed 's/$/\\\\\\\\n/g')
    DEFINITION_VALUE=${DEFINITION_CONTENT:-$DEFAULT_VALUE}

    local EXTRA_CONTENT=$(cat $TARGET_FOLDER/extra.md | sed 's/$/\\\\\\\\n/g')
    EXTRA_VALUE=${EXTRA_CONTENT:-$DEFAULT_VALUE}

    local PREFERENCE_CONTENT=$(cat $TARGET_FOLDER/preference.md | sed 's/$/\\\\\\\\n/g')
    PREFERENCE_VALUE=${PREFERENCE_CONTENT:-$DEFAULT_VALUE}

    local CONTENT='{"type":"template","data":{"template_id":"'$TEMPLATE_ID'","template_variable":{"banner":"'$IMAGE_KEY'","scene_content":"'$SCENE_VALUE'","definition_content":"'$DEFINITION_VALUE'","extra_content":"'$EXTRA_VALUE'","preference_content":"'$PREFERENCE_VALUE'"}}}'
    CONTENT=$(echo $CONTENT | sed 's/\"/\\\\\"/g')

    # 发送消息
    local send_result=`_gtb_feishu_message $GROUP_ID $TYPE "$CONTENT"`
    echo "feishu message command's output is: $send_result"

    # 发送成功，文件挪到done,并且commit,push
    if [[ $send_result == "DONE" ]]; then
      mv $TARGET_FOLDER $DONE_DIR/$TARGET_NAME
      run "cd $REPO_DIR"
      git add . && git commit -m "move $TARGET_NAME to done" && git push
      echo "updated repo"
    fi
}
