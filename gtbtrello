_gtb_trello_find_board_id() {
  local -r BOARD_NAME=${1:?Board name is required!}
  shift
  local RESULT="$(_gtb_cache_get trello "board-id-${BOARD_NAME}")"

  if [[ -n "$RESULT" ]]; then
    echo "$RESULT"
    return 0
  fi

  RESULT=$(_gtb_trello_api "/search?modelTypes=boards&query=${BOARD_NAME}" |
    jq -r ".boards[] | select(.name == \"$BOARD_NAME\") | .id" |
    head -n1)

  if [[ -n "$RESULT" ]]; then
    _gtb_cache_set trello "board-id-${BOARD_NAME}" "$RESULT"
    echo "$RESULT"
    return 0
  fi

  return 1
}

_gtb_trello_check_card_closed() {
  local -r CARD_ID=${1:?Card id is required!}
  local -r URL="/cards/$CARD_ID"

  RESULT=$(_gtb_trello_api "/cards/${CARD_ID}" |
    jq -r ".closed")

  if [[ "$RESULT" = "true" ]]; then
    echo "$RESULT"
    return 0
  fi

  fail "failed to archive card ${GTB_TRELLO_CARD_ID}!"
}

_gtb_trello_find_card_id() {
  local -r BOARD_NAME=${1:?Board name is required!}
  local -r CARD_NAME=${2:?Card name is required!}

  local -r BOARD_ID=$(_gtb_trello_find_board_id "$BOARD_NAME")
  assert_not_empty "Cannot find board with name '$BOARD_NAME'!" "$BOARD_ID"

  local -r URL="/search?modelTypes=cards&card_fields=name&idBoards=${BOARD_ID}&query=${CARD_NAME}"
  local -r RESULT="$(_gtb_trello_api "$URL" |
    jq -r ".cards[] | select(.name == \"$CARD_NAME\") | .id" |
    head -n1)"

  if [[ -n "$RESULT" ]]; then
    echo "$RESULT"
    return 0
  fi

  return 1
}

_gtb_trello_find_list_id() {
  local BOARD_NAME=${1:?Board name is required!}
  local LIST_NAME=${2:?List name is required!}
  shift 2

  local CACHE_KEY="list-id-${BOARD_NAME}-${LIST_NAME}"
  local RESULT="$(_gtb_cache_get trello "$CACHE_KEY")"
  if [[ -n "$RESULT" ]]; then
    echo "$RESULT"
    return 0
  fi

  local BOARD_ID=$(_gtb_trello_find_board_id "$BOARD_NAME")
  assert_not_empty "Cannot find board with name '$GTB_TRELLO_BOARD_NAME'!" "$BOARD_ID"

  RESULT=$(_gtb_trello_api "/boards/${BOARD_ID}/lists" |
    jq -r ".[] | select(.name == \"$LIST_NAME\") | .id")

  if [[ -n "$RESULT" ]]; then
    _gtb_cache_set trello "$CACHE_KEY" "$RESULT"
    echo "$RESULT"
    return 0
  fi

  return 1
}

_gtb_trello_remove_member_from_board() {
  GTB_TRELLO_BOARD_NAME="${GTB_TRELLO_BOARD_NAME:?Trello board name is required! Specify by --board <NAME>.}"

  local ORG=${1:?Student org is required!}

  local BOARD_ID=$(_gtb_trello_find_board_id "$GTB_TRELLO_BOARD_NAME")
  assert_not_empty "Cannot find board with name '$GTB_TRELLO_BOARD_NAME'!" "$BOARD_ID"

  local username
  local member_id

  if [[ $# -eq 2 ]]; then
    local -r TRELLO_EMAIL=${2:?Trello member email is required!}
    username=$(_gtb_trello_member_username $TRELLO_EMAIL | _gtb_cuts 1 | head -n1)
    member_id=$(trello_member_id $TRELLO_EMAIL | _gtb_cuts 1 | head -n1)
  elif [[ $# -eq 3 ]]; then
    username="${2:?Trello username is required!}"
    member_id="${3:?Trello member id is required!}"
  else
    fail "usage: gtb trello remove_member_from_board --board <BOARD_NAME> <TRELLO_EMAIL|TRELLO_USERNAME TRELLO_MEMBER_ID>"
  fi

  local -r board_json=$(_gtb_trello_api --method 'DELETE' "/boards/${BOARD_ID}/members/${member_id}")

  local -r RESULT="$(jq -jr ".members[] | select(.username==\"$username\") | .username, \" \", .memberType, \" \", .fullName, \"\n\"" <(echo "$JSON"))"

  if [[ -n "$RESULT" ]]; then
    echo "❌ $@ $RESULT"
    fail "failed to remove member ${username} from board ${GTB_TRELLO_BOARD_NAME}"
  fi

  echo "✅ $@"
  return 0
}

_gtb_trello_invite_member_to_board() {
  GTB_TRELLO_BOARD_NAME="${GTB_TRELLO_BOARD_NAME:?Trello board name is required! Specify by --board <NAME>.}"
  GTB_TRELLO_MEMBER_TYPE="${GTB_TRELLO_MEMBER_TYPE:?Trello member type is required! Specify by --type <admin|normal|observer>.}"

  local ORG=${1:?Student org is required!}
  local TRELLO_EMAIL=${2:?Trell member email is required!}

  local BOARD_ID=$(_gtb_trello_find_board_id "$GTB_TRELLO_BOARD_NAME")
  assert_not_empty "Cannot find board with name '$GTB_TRELLO_BOARD_NAME'!" "$BOARD_ID"

  local -r MEMBER_ID=$(trello_member_id "$TRELLO_EMAIL" | _gtb_cuts 1 | head -n1)
  assert_not_empty "Cannot find member with email '$TRELLO_EMAIL'!" "$MEMBER_ID"

  local -r JSON="$(_gtb_trello_api --method 'PUT' "/boards/${BOARD_ID}/members?email=${TRELLO_EMAIL}&type=${GTB_TRELLO_MEMBER_TYPE}")"

  local -r RESULT="$(jq -jr ".memberships[] | select(.idMember==\"$MEMBER_ID\") | .idMember, \" \", .memberType, \" \", .deactivated, \"\n\"" <(echo "$JSON"))"

  if [[ -n "$RESULT" ]]; then
    echo "OK $ORG $TRELLO_EMAIL $RESULT"
    return 0
  fi

  echo "ER $ORG $TRELLO_EMAIL"
  error $response
  return 1
}

_gtb_trello_board_field_list() {
  local BOARD_ID=$(_gtb_trello_find_board_id "$GTB_TRELLO_BOARD_NAME")

  _gtb_trello_api "/boards/${BOARD_ID}/customFields" |
    jq -jr '.[] | .name, " ", .type, " ", .id, "\n"' |
    _gtb_sort "${GTB_SORT_ORDER:-1,1}" |
    _gtb_cuts "${GTB_FIELDS:-1-}" |
    _gtb_table_format "$@"
}

_gtb_trello_board_field_id() {
  GTB_TRELLO_BOARD_NAME="${GTB_TRELLO_BOARD_NAME:?Trello board name is required! Specify by --board <NAME>.}"
  local -r FIELD_NAME="${1:?field name is required!}"
  _gtb_trello_api_get_field_id "$FIELD_NAME"
}

_gtb_trello_api_get_field_id() {
  local -r QUERY=${1:?search query is required!}
  local RESULT="$(_gtb_cache_get trello "custom-field-id-${QUERY}")"

  if [[ -n "$RESULT" ]]; then
    echo "$RESULT"
    return 0
  fi

  RESULT=$(_gtb_trello_board_field_list --raw | $GTB_GREP "$QUERY" | _gtb_cuts 3)
  if [[ -n "$RESULT" ]] && [[ 'null' != "$RESULT" ]]; then
    _gtb_cache_set trello "custom-field-id-${QUERY}" "$RESULT"
    echo "$RESULT"
    return 0
  fi

  return 1
}

_gtb_trello_board_field() {
  _gtb_run_subcommand ${FUNCNAME[0]#_gtb_} "$@"
}

_gtb_trello_board_label_list() {
  local BOARD_ID=$(_gtb_trello_find_board_id "$GTB_TRELLO_BOARD_NAME")

  _gtb_trello_api "/boards/${BOARD_ID}/labels" |
    jq -jr $'.[] | .id, " ", .color, " \'", .name, "\'\n"' |
    _gtb_sort "${GTB_SORT_ORDER:-1,1}" |
    _gtb_cuts "${GTB_labelS:-1-}" |
    _gtb_table_format "$@"
}

_gtb_trello_board_label_id() {
  GTB_TRELLO_BOARD_NAME="${GTB_TRELLO_BOARD_NAME:?Trello board name is required! Specify by --board <NAME>.}"
  local -r LABEL_NAME="${1:?label name is required!}"
  _gtb_trello_api_get_label_id "$LABEL_NAME"
}

_gtb_trello_api_get_label_id() {
  local -r QUERY=${1:?search query is required!}
  local RESULT="$(_gtb_cache_get trello "label-id-${QUERY}")"

  if [[ -n "$RESULT" ]]; then
    echo "$RESULT"
    return 0
  fi

  RESULT=$(_gtb_trello_board_label_list --raw | $GTB_GREP "$QUERY" | _gtb_cuts 1)
  if [[ -n "$RESULT" ]] && [[ 'null' != "$RESULT" ]]; then
    _gtb_cache_set trello "label-id-${QUERY}" "$RESULT"
    echo "$RESULT"
    return 0
  fi

  return 1
}

_gtb_trello_board_label() {
  _gtb_run_subcommand ${FUNCNAME[0]#_gtb_} "$@"
}

_gtb_trello_card_field_set() {
  GTB_TRELLO_BOARD_NAME="${GTB_TRELLO_BOARD_NAME:?Trello board name is required! Specify by --board <NAME>.}"
  GTB_TRELLO_CARD_ID="${GTB_TRELLO_CARD_ID:?Trello card ID is required! Specify by --card-id <NAME>.}"
  local -r FIELD_NAME="${1:?field name is required!}"
  local -r FIELD_VALUE="${@:2}"

  local -r FIELD_ID="$(_gtb_trello_board_field_id $FIELD_NAME)"
  assert_not_empty "Cannot find custom field '$FIELD_NAME' on board '$GTB_TRELLO_BOARD_NAME'!" "FIELD_ID"

  echo "{\"value\": { \"text\": \"$FIELD_VALUE\" }}" |
    _gtb_trello_api --stdin --method 'PUT' "/cards/${GTB_TRELLO_CARD_ID}/customField/${FIELD_ID}/item" |
    jq -jr '"card:", .idModel, " idCustomField:", .idCustomField, " value:", .value.text, "\n"'
}

_gtb_trello_card_field_get() {
  GTB_TRELLO_BOARD_NAME="${GTB_TRELLO_BOARD_NAME:?Trello board name is required! Specify by --board <NAME>.}"
  GTB_TRELLO_CARD_ID="${GTB_TRELLO_CARD_ID:?Trello card ID is required! Specify by --card-id <NAME>.}"
  local -r FIELD_NAME="${1:?field name is required!}"
  local -r FIELD_VALUE="${@:2}"

  local -r FIELD_ID="$(_gtb_trello_board_field_id $FIELD_NAME)"
  assert_not_empty "Cannot find custom field '$FIELD_NAME' on board '$GTB_TRELLO_BOARD_NAME'!" "FIELD_ID"

  _gtb_trello_api "/cards/${GTB_TRELLO_CARD_ID}?customFieldItems=true" |
    jq -r ".customFieldItems[] | select (.idCustomField == \"${FIELD_ID}\") | .value.text"
}

_gtb_trello_card_field() {
  _gtb_run_subcommand ${FUNCNAME[0]#_gtb_} "$@"
}

_gtb_trello_card_label_remove() {
  GTB_TRELLO_BOARD_NAME="${GTB_TRELLO_BOARD_NAME:?Trello board name is required! Specify by --board <NAME>.}"
  GTB_TRELLO_CARD_ID="${GTB_TRELLO_CARD_ID:?Trello card ID is required! Specify by --card-id <NAME>.}"
  local -r LABEL_NAME="${1:?label name is required!}"
  local -r LABEL_VALUE="${@:2}"

  local -r LABEL_ID="$(_gtb_trello_board_label_id $LABEL_NAME)"
  assert_not_empty "Cannot find custom label '$LABEL_NAME' on board '$GTB_TRELLO_BOARD_NAME'!" "LABEL_ID"

  local -r RESULT="$(_gtb_trello_api --method 'DELETE' "/cards/${GTB_TRELLO_CARD_ID}/idLabels/${LABEL_ID}")"

  $GTB_GREP --silent '{"_value":null}' <(echo "$RESULT") && return 0

  fail "Error: failed to remove label '$LABEL_NAME' to card '$GTB_TRELLO_CARD_ID' on board '$GTB_TRELLO_BOARD_NAME'!"
}

_gtb_trello_card_label_add() {
  GTB_TRELLO_BOARD_NAME="${GTB_TRELLO_BOARD_NAME:?Trello board name is required! Specify by --board <NAME>.}"
  GTB_TRELLO_CARD_ID="${GTB_TRELLO_CARD_ID:?Trello card ID is required! Specify by --card-id <NAME>.}"
  local -r LABEL_NAME="${1:?label name is required!}"

  local -r LABEL_ID="$(_gtb_trello_board_label_id $LABEL_NAME)"
  assert_not_empty "Cannot find custom label '$LABEL_NAME' on board '$GTB_TRELLO_BOARD_NAME'!" "LABEL_ID"

  local -r RESULT="$(_gtb_trello_api --method 'POST' "/cards/${GTB_TRELLO_CARD_ID}/idLabels?value=${LABEL_ID}")"

  $GTB_GREP --silent "$LABEL_ID" <(echo "$RESULT") && return 0
  $GTB_GREP --silent "that label is already on the card" <(echo "$RESULT") && return 0

  fail "Error: failed to add label '$LABEL_NAME' to card '$GTB_TRELLO_CARD_ID' on board '$GTB_TRELLO_BOARD_NAME'!"
}

_gtb_trello_card_label_list() {
  GTB_TRELLO_BOARD_NAME="${GTB_TRELLO_BOARD_NAME:?Trello board name is required! Specify by --board <NAME>.}"
  GTB_TRELLO_CARD_ID="${GTB_TRELLO_CARD_ID:?Trello card ID is required! Specify by --card-id <NAME>.}"

  _gtb_trello_api "/cards/${GTB_TRELLO_CARD_ID}" |
    jq -jr '.labels[] | .color, " ", .name, "\n"'
}

_gtb_trello_card_label() {
  _gtb_run_subcommand ${FUNCNAME[0]#_gtb_} "$@"
}

_gtb_trello_card_member_add() {
  GTB_TRELLO_CARD_ID="${GTB_TRELLO_CARD_ID:?Trello card ID is required! Specify by --card-id <ID>.}"

  trello_member_id "$@" |
    env_parallel \
      --linebuffer \
      --jobs 1 \
      $GTB_PARALLEL_OPT_PROGRESS_BAR \
      "_gtb_trello_api --method 'POST' '/cards/${GTB_TRELLO_CARD_ID}/idMembers?value={1}' 1>/dev/null 2>&1"

  local -r MEMBER_LIST="$(_gtb_trello_card_member_list)"
  echo "${MEMBER_LIST}"

  while read -r MEMBER_ID HINT; do
    if ! $GTB_GREP --silent "${MEMBER_ID}" <(echo "${MEMBER_LIST}"); then
      fail "failed to add '${HINT}' to card!"
    fi
  done < <(trello_member_id "$@")
}

_gtb_trello_card_member_list() {
  GTB_TRELLO_CARD_ID="${GTB_TRELLO_CARD_ID:?Trello card ID is required! Specify by --card-id <NAME>.}"

  _gtb_trello_api "/cards/${GTB_TRELLO_CARD_ID}/members" |
    jq -jr '.[] | .username, "|", .initials, "|", .fullName, "|", .id, "\n"' |
    _gtb_sort "${GTB_SORT_ORDER:-1,1}" '|' |
    _gtb_cuts "${GTB_FIELDS:-1-}" '|' |
    _gtb_table_format -s '|'
}

_gtb_trello_card_member() {
  _gtb_run_subcommand ${FUNCNAME[0]#_gtb_} "$@"
}

_gtb_trello_card_archive() {
  GTB_TRELLO_CARD_ID="${GTB_TRELLO_CARD_ID:?Trello card ID is required! Specify by --card-id <ID>.}"

  local URL="/cards/${GTB_TRELLO_CARD_ID}?closed=true"

  _gtb_trello_api --method 'PUT' "$URL" >/dev/null

  _gtb_trello_check_card_closed "$GTB_TRELLO_CARD_ID"
}

_gtb_trello_card_create() {
  GTB_TRELLO_BOARD_NAME="${GTB_TRELLO_BOARD_NAME:?Trello board name is required! Specify by --board <NAME>.}"
  GTB_TRELLO_LIST_NAME="${GTB_TRELLO_LIST_NAME:?Trello list name is required! Specify by --list <NAME>.}"

  # must read all input from stdin before running any httpie commands
  if [[ -p /dev/stdin ]]; then
    GTB_TRELLO_CARD_DESC=$(
      echo $GTB_TRELLO_CARD_DESC
      cat
    )
  fi

  local LIST_ID=$(_gtb_trello_find_list_id "$GTB_TRELLO_BOARD_NAME" "$GTB_TRELLO_LIST_NAME")

  local MEMBER_IDS=''
  if [[ -n "$GTB_TRELLO_CARD_MEMBERS" ]]; then
    MEMBER_IDS=$(trello_member_id $GTB_TRELLO_CARD_MEMBERS | _gtb_cuts 1 | paste -sd',' -)
  fi

  local PARAMS="idList=${LIST_ID}&pos=top"

  [[ -n "$GTB_TRELLO_CARD_NAME" ]] && PARAMS="$PARAMS&name=$(_gtb_urlencode "$GTB_TRELLO_CARD_NAME")"
  [[ -n "$GTB_TRELLO_CARD_DESC" ]] && PARAMS="$PARAMS&desc=$(_gtb_urlencode "$GTB_TRELLO_CARD_DESC")"
  [[ -n "$MEMBER_IDS" ]] && PARAMS="$PARAMS&idMembers=${MEMBER_IDS}"
  PARAMS="$PARAMS&due=$(gdate --date="$GTB_TRELLO_CARD_DUE_IN_DAYS days" --iso-8601=seconds)"

  _gtb_trello_api --method 'POST' "/cards?${PARAMS}" |
    jq -jr '.id, " ", .shortUrl, " ", .name, "\n"'
}

_gtb_trello_card_check() {
  GTB_TRELLO_BOARD_NAME="${GTB_TRELLO_BOARD_NAME:?Trello board name is required! Specify by --board <NAME>.}"
  GTB_TRELLO_LIST_NAME="${GTB_TRELLO_LIST_NAME:?Trello list name is required! Specify by --list <NAME>.}"

  local LIST_ID=$(_gtb_trello_find_list_id "$GTB_TRELLO_BOARD_NAME" "$GTB_TRELLO_LIST_NAME")
  assert_not_empty "Cannot find list with name '$GTB_TRELLO_LIST_NAME'!" "$LIST_ID"

  local cards_info=$(_gtb_trello_api "/lists/${LIST_ID}/cards" |
    jq -jr '.[] | .pos, " ", .name, " ", .badges.checkItemsChecked, " ", .badges.checkItems, " ", .id, " ", .shortUrl, "\n"')

  local student_lines=$(_gtb_filter_students "$@")
  echo "$student_lines" | cut -d' ' -f2,7 | while read -r ORG CHINESE_NAME REST; do
    local card_info=$(echo "$cards_info" | grep --color=never "$CHINESE_NAME")
    [[ -n "$card_info" ]] && status='OK' || status="ER"
    echo $status $ORG $card_info
  done |
    _gtb_sort '1,1r;5,5n;6,6n;7,7' |
    _gtb_table_format |
    _gtb_tr_symbols
}

_gtb_trello_card_list() {
  GTB_TRELLO_BOARD_NAME="${GTB_TRELLO_BOARD_NAME:?Trello board name is required! Specify by --board <NAME>.}"

  local BOARD_ID=$(_gtb_trello_find_board_id "$GTB_TRELLO_BOARD_NAME")
  assert_not_empty "Cannot find board with name '$GTB_TRELLO_BOARD_NAME'!" "$BOARD_ID"

  local URL="/boards/${BOARD_ID}/cards"

  if [[ -n "$GTB_TRELLO_LIST_NAME" ]]; then
    local LIST_ID=$(_gtb_trello_find_list_id "$GTB_TRELLO_BOARD_NAME" "$GTB_TRELLO_LIST_NAME")
    assert_not_empty "Cannot find list with name '$GTB_TRELLO_LIST_NAME'!" "$LIST_ID"
    URL="/lists/${LIST_ID}/cards"
  fi

  _gtb_trello_api "$URL" |
    jq -jr '.[] | .pos, "^", .id, "^", .shortUrl, "^", .name, "\n"' |
    _gtb_sort "${GTB_SORT_ORDER:-1,1n}" |
    _gtb_table_format -s '^'
}

_gtb_trello_card_id() {
  GTB_TRELLO_BOARD_NAME="${GTB_TRELLO_BOARD_NAME:?Trello board name is required! Specify by --board <NAME>.}"
  GTB_TRELLO_CARD_NAME="${GTB_TRELLO_CARD_NAME:?Trello card name is required! Specify by --card-name <NAME>.}"

  _gtb_trello_find_card_id "${GTB_TRELLO_BOARD_NAME}" "${GTB_TRELLO_CARD_NAME}"
}

_gtb_trello_card() {
  _gtb_run_subcommand ${FUNCNAME[0]#_gtb_} "$@"
}

_gtb_trello_list_list() {
  GTB_TRELLO_BOARD_NAME="${GTB_TRELLO_BOARD_NAME:?Trello board name is required! Specify by --board <NAME>.}"
  local BOARD_ID=$(_gtb_trello_find_board_id "$GTB_TRELLO_BOARD_NAME")

  _gtb_trello_api "/boards/${BOARD_ID}/lists" |
    jq -jr '.[] | .id, "^", .name, "\n"' |
    _gtb_table_format -s '^'
}

_gtb_trello_list() {
  if ! echo $1 | grep --silent '^\(list\)$'; then
    set -- list "$@"
  fi

  _gtb_run_subcommand ${FUNCNAME[0]#_gtb_} "$@"
}

_gtb_trello_board_member() {
  _gtb_run_subcommand ${FUNCNAME[0]#_gtb_} "$@"
}

_gtb_trello_board_member_list() {
  trello_board_member_list |
    _gtb_sort "${GTB_SORT_ORDER:-1,1}" '|' |
    _gtb_cuts "${GTB_FIELDS:-1-}" '|' |
    _gtb_table_format -s '|'
}

trello_board_member_list() {
  GTB_TRELLO_BOARD_NAME="${GTB_TRELLO_BOARD_NAME:?Trello board name is required! Specify by --board <NAME>.}"

  local -r BOARD_ID=$(_gtb_trello_find_board_id "$GTB_TRELLO_BOARD_NAME")
  assert_not_empty "Cannot find board with name '$GTB_TRELLO_BOARD_NAME'!" "$BOARD_ID"

  _gtb_trello_api "/boards/${BOARD_ID}/members" |
    jq -jr '.[] | .id, "|", .username, "|", .fullName, "\n"'
}

_gtb_trello_board_member_check() {
  local KEEP_FILE='1'

  [[ $# -ne 0 ]] && KEEP_FILE='2'

  join -1 1 -2 1 -a "${KEEP_FILE}" -o '1.1,1.2,1.3,2.2,2.3,2.4,2.5' -e "${STATUS_NOT_FOUND}" -t '|' \
    <(trello_board_member_list | _gtb_sort '1,1' '|') \
    <(
      {
        GTB_FROM_TRAINERS=true trello_member_id "$@" | sed 's/ / 3 Coach /2'
        GTB_FROM_BUDDIES=true trello_member_id "$@" | sed 's/ / 2 Buddy /2'
        GTB_FROM_STUDENTS=true trello_member_id "$@" | sed 's/ / 1 Student /2'
      } | _gtb_cuts '1-5' | _gtb_sort '1,1;5,5' | tr ' ' '|'
    ) |
    _gtb_sort "5,5nr;7,7" '|' |
    _gtb_cuts '1-4,6-7' '|' |
    _gtb_cuts "${GTB_FIELDS:-1-}" '|' |
    _gtb_table_format -s '|' |
    _gtb_highlight \
      "${STATUS_NOT_FOUND}" red
}

_gtb_trello_board_remove() {
  GTB_TRELLO_BOARD_NAME="${GTB_TRELLO_BOARD_NAME:?Trello board name is required! Specify by --board <NAME>.}"

  local student_lines=$(_gtb_filter_students "$@")
  local students_count=$(_gtb_count_lines "$student_lines")

  assert_not_empty "error: cannot find any students with filters: '$@'!" "$student_lines"

  echo "$student_lines" |
    _gtb_cuts 2,4,7 |
    sort |
    column -t |
    cat -n

  if [[ "false" == "$GTB_YES" ]]; then
    read -p "about to REMOVE ${students_count} students from Trello board $GTB_TRELLO_BOARD_NAME? (y|n) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
      return 1
    fi
  fi

  echo "$student_lines" |
    _gtb_cuts '2,5' |
    env_parallel --jobs 1 --colsep ' ' $GTB_PARALLEL_OPT_PROGRESS_BAR --linebuffer \
      _gtb_trello_remove_member_from_board {1} {2} |
    _gtb_sort 1r |
    _gtb_table_format |
    _gtb_tr_symbols
}

_gtb_trello_board_invite() {
  GTB_TRELLO_BOARD_NAME="${GTB_TRELLO_BOARD_NAME:?Trello board name is required! Specify by --board <NAME>.}"
  GTB_TRELLO_MEMBER_TYPE="${GTB_TRELLO_MEMBER_TYPE:?Trello member type is required! Specify by --type <admin|normal|observer>.}"

  local -r BOARD_ID=$(_gtb_trello_find_board_id "$GTB_TRELLO_BOARD_NAME")
  assert_not_empty "Cannot find board with name '$GTB_TRELLO_BOARD_NAME'!" "$BOARD_ID"

  # input should have two fields: name, email
  local input

  if [[ -p /dev/stdin ]]; then
    input=$(cat)
  elif [[ "true" == "$GTB_FROM_BUDDIES" ]]; then
    input=$(_gtb_filter_buddies "$@" | _gtb_cuts '1,3')
  else
    input=$(_gtb_filter_students "$@" | _gtb_cuts '1,5')
  fi

  echo "$input" |
    env_parallel --jobs $JOBS --colsep ' ' $GTB_PARALLEL_OPT_PROGRESS_BAR --linebuffer \
      _gtb_trello_invite_member_to_board {1} {2} |
    _gtb_sort 1r |
    _gtb_table_format |
    _gtb_tr_symbols
}

_gtb_trello_board_list() {
  _gtb_trello_api "/members/${GTB_TRELLO_USERNAME}/boards" |
    jq -jr '.[] | .id, "^", .shortUrl, "^", .name, "\n"' |
    _gtb_table_format -s '^'
}

_gtb_trello_board_id() {
  GTB_TRELLO_BOARD_NAME="${GTB_TRELLO_BOARD_NAME:?Trello board name is required! Specify by --board <NAME>.}"
  _gtb_trello_find_board_id "${GTB_TRELLO_BOARD_NAME}"
}

_gtb_trello_board() {
  _gtb_run_subcommand ${FUNCNAME[0]#_gtb_} "$@"
}

_gtb_trello_boards() {
  echo "GTB-Dev-Content"
  echo "GTB-Dev-Forum"
  echo "GTB-Dev-Resource"
  echo "$GTB_TERM" | sed -e 's/gtb/GTB-Dev/' -e 's/$/-Buddy/'
}

_gtb_trello_member() {
  _gtb_run_subcommand ${FUNCNAME[0]#_gtb_} "$@"
}

_gtb_trello_member_username() {
  local input
  if [[ "true" == "$GTB_FROM_BUDDIES" ]]; then
    input=$(_gtb_filter_buddies "$@" | _gtb_cuts '1,3')
  elif [[ "true" == "$GTB_FROM_TRAINERS" ]]; then
    input=$(_gtb_filter_trainers "$@" | _gtb_cuts '1,3')
  else
    input=$(_gtb_filter_students "$@" | _gtb_cuts '1,5')
  fi

  [[ -z "$input" ]] && return 0

  # TODO support input from pipe
  echo "$input" | while read -r fullname email; do
    _gtb_trello_api_get_member_username "$email" "$fullname"
  done | _gtb_sort '2,2'
}

_gtb_trello_member_id() {
  trello_member_id "$@" |
    _gtb_sort "${GTB_SORT_ORDER:-1,1;3,3}" |
    _gtb_cuts "${GTB_FIELDS:-1-}" |
    _gtb_table_format
}

trello_member_id() {
  if [[ "true" == "$GTB_FROM_STDIN" && -p /dev/stdin ]]; then
    cat
  elif [[ "true" == "$GTB_FROM_BUDDIES" ]]; then
    _gtb_filter_buddies "$@" | awk '{print $3, $1, $2, $4}'
  elif [[ "true" == "$GTB_FROM_TRAINERS" ]]; then
    _gtb_filter_trainers "$@" | awk '{print $3, $1, $4}'
  else
    _gtb_filter_students "$@" | awk '{print $5, $1, $2, $7}'
  fi |
    while read -r email hint; do
      _gtb_trello_api_get_member_id "$email" "$hint"
    done
}

_gtb_trello_api_get_member_username() {
  local -r QUERY=${1:?search query is required!}
  shift
  local RESULT="$(_gtb_cache_get trello "member-username-${QUERY}")"

  if [[ -n "$RESULT" ]]; then
    echo "$RESULT $*"
    return 0
  fi

  RESULT=$(_gtb_trello_api "/search/members?query=${QUERY}&limit=1" | jq -r '.[0].username')
  if [[ -n "$RESULT" ]] && [[ 'null' != "$RESULT" ]]; then
    _gtb_cache_set trello "member-username-${QUERY}" "$RESULT"
    echo "$RESULT $*"
    return 0
  fi

  return 1
}

_gtb_trello_api_get_member_id() {
  local -r QUERY=${1:?search query is required!}
  local RESULT="$(_gtb_cache_get trello "member-id-${QUERY}")"

  if [[ -n "$RESULT" ]]; then
    echo "$RESULT $*"
    return 0
  fi

  RESULT=$(_gtb_trello_api "/search/members?query=${QUERY}&limit=1" | jq -r '.[0].id')
  if [[ -n "$RESULT" ]] && [[ 'null' != "$RESULT" ]]; then
    _gtb_cache_set trello "member-id-${QUERY}" "$RESULT"
    echo "$RESULT $*"
    return 0
  fi

  echo "${STATUS_NOT_FOUND} $*"
  return 1
}

_gtb_trello_limits() {
  _gtb_trello_api "/resource/limits"
}

_gtb_trello_api() {
  local HTTP_METHOD
  local HTTP_PRINT
  local OPTION_IGNORE_STDIN='--ignore-stdin'
  local HTTP_TIMEOUT='--timeout 10'

  while (("$#")); do
    case "$1" in
    --method)
      if [[ -n "$2" ]] && [[ ${2:0:1} != "-" ]]; then
        HTTP_METHOD="$2"
        shift 2
      else
        fail "Error: HTTP method specified by '$1' is missing"
      fi
      ;;
    --print)
      if [[ -n "$2" ]] && [[ ${2:0:1} != "-" ]]; then
        HTTP_PRINT="$2"
        shift 2
      else
        fail "Error: httpie --print WHAT specified by '$1' is missing, e.g. HBhb"
      fi
      ;;
    --stdin)
      OPTION_IGNORE_STDIN=''
      shift
      ;;
    *)
      break
      ;;
    esac
  done

  HTTP_METHOD=${HTTP_METHOD:-$GTB_HTTP_METHOD}
  HTTP_PRINT=${HTTP_PRINT:-$GTB_HTTP_PRINT}

  local -r API_PATH="${1:?path is required! (e.g. /cards/\{id\})}"
  local OPTION_PRINT=''
  [[ -n "$HTTP_PRINT" ]] && OPTION_PRINT="--print $HTTP_PRINT"

  local URL="${GTB_TRELLO_API}${API_PATH}"
  if [[ "$API_PATH" =~ '?' ]]; then
    URL="${URL}${GTB_TRELLO_AUTH}"
  else
    URL="${URL}${GTB_TRELLO_AUTH/&/?}"
  fi

  run "http $OPTION_IGNORE_STDIN $OPTION_PRINT $HTTP_TIMEOUT $HTTP_METHOD '${URL}'"
}

