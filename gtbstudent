
_gtb_student_random_clear() {
  _gtb_student_random_reset
}

_gtb_student_random_reset() {
  echo -n >$GTB_RANDOM_LIST_FILE
}

_gtb_student_random_show() {
  cat $GTB_RANDOM_LIST_FILE
}

_gtb_student_random_next() {
  if [[ ! -s $GTB_RANDOM_LIST_FILE ]]; then
    fail 'error: Please run `gtb student random` to generate random list first.'
  fi

  local next=$(head -n1 $GTB_RANDOM_LIST_FILE)
  local rest=$(tail -n +2 $GTB_RANDOM_LIST_FILE)

  echo "$rest" >$GTB_RANDOM_LIST_FILE
  echo "$next" >>$GTB_RANDOM_LIST_FILE

  echo $next
}

_gtb_student_random_generate() {
  _gtb_filter_students "$@" |
    shuf |
    cut -d' ' -f2 |
    cat -n >$GTB_RANDOM_LIST_FILE
}

_gtb_student_random() {
  if ! echo $1 | grep --silent '^\(next\|show\|reset\|generate\|clear\)$'; then
    set -- generate "$@"
  fi

  _gtb_run_subcommand ${FUNCNAME[0]#_gtb_} "$@"
}

_gtb_student_org_invite_cancel() {
  local student_lines=$(_gtb_filter_students "$@")
  local students_count=$(_gtb_count_lines "$student_lines")

  echo "$student_lines" | while read -r FULLNAME ORG TERM_NAME USERNAME TAGS; do
    echo $(gh_cancel_org_invitations $ORG | tr '\n' '|')
  done | _gtb_pv $students_count |
    _gtb_tee1 |
    sed 's/|$//' |
    tr '|' '\n' |
    tr ' ' '|' |
    sort |
    _gtb_tabularize 'List of All Pending Student Org Invitations'
}

_gtb_student_org_invite_create() {
  local student_lines=$(_gtb_filter_students "$@")
  local students_count=$(_gtb_count_lines "$student_lines")
  assert_not_empty "error: cannot find any students with filters: '$@'!" "$student_lines"

  local invitee_username

  if [[ -n "$GTB_TRAINER_FILTER" ]]; then
    assert_trainers_file_exists
    invitee_username=$(_gtb_trainer_username $GTB_TRAINER_FILTER | head -n1)
    assert_not_empty "Cannot find '$GTB_TRAINER_FILTER' in ${GTB_TRAINERS_FILE}!" "$invitee_username"
  elif [[ -n "$GTB_BUDDY_FILTER" ]]; then
    assert_buddies_file_exists
    invitee_username=$(_gtb_buddy_username $GTB_BUDDY_FILTER | head -n1)
    assert_not_empty "Cannot find '$GTB_BUDDY_FILTER' in ${GTB_BUDDIES_FILE}!" "$invitee_username"
  elif [[ -n "$GTB_USERNAME" ]]; then
    invitee_username="$GTB_USERNAME"
  fi

  echo "$student_lines" |
    env_parallel \
      --linebuffer \
      --jobs $JOBS \
      --colsep ' ' \
      $GTB_PARALLEL_OPT_PROGRESS_BAR \
      gh_invite_user_to_org "{2}" "$invitee_username" 'admin' "{7}" |
    _gtb_sort '1,1r;2,2' |
    _gtb_table_format |
    _gtb_tr_symbols
}

_gtb_student_org_invite_list() {
  local student_lines=$(_gtb_filter_students "$@")
  local students_count=$(_gtb_count_lines "$student_lines")
  assert_not_empty "error: cannot find any students with filters: '$@'!" "$student_lines"

  local result=$(echo "$student_lines" |
    _gtb_cuts 2 |
    env_parallel \
      --linebuffer \
      --jobs $JOBS \
      --colsep ' ' \
      $GTB_PARALLEL_OPT_PROGRESS_BAR \
      gh_list_org_invitations "{}")
  local trainers=$(echo "$result" | _gtb_cuts 1 | sort -ur)

  for trainer in $trainers; do
    echo "$result" |
      grep -w -E --color=never "$trainer" |
      _gtb_sort '1,1;2,2' |
      _gtb_nl
  done | _gtb_table_format
}

_gtb_student_org_invite() {
  _gtb_run_subcommand ${FUNCNAME[0]#_gtb_} "$@"
}

_gtb_student_org_membership_role() {
  assert_trainers_file_exists

  local ROLE=${1:?Role is required!(admin|member)}
  shift 1
  local TRAINER_FULLNAME=${1:?Trainer fullname is required! (e.g. qu.hang wang.xiaofeng)}
  shift 1

  local TRAINER_USERNAME=$(_gtb_trainer_username $TRAINER_FULLNAME)
  assert_not_empty "Cannot find '$TRAINER_FULLNAME' in ${GTB_TRAINERS_FILE}!" "$TRAINER_USERNAME"

  local student_lines=$(_gtb_filter_students "$@")
  local students_count=$(_gtb_count_lines "$student_lines")
  assert_not_empty "error: cannot find any students with filters: '$@'!" "$student_lines"

  echo "$student_lines" |
    _gtb_cuts 2 |
    env_parallel \
      --linebuffer \
      --jobs $JOBS \
      --colsep ' ' \
      $GTB_PARALLEL_OPT_PROGRESS_BAR \
      gh_set_org_membership {} $TRAINER_USERNAME $ROLE |
    _gtb_sort '3,3;4,4;2,2' |
    _gtb_table_format
}

_gtb_student_org_membership() {
  if ! echo $1 | grep --silent '^\(role\)$'; then
    set -- role "$@"
  fi

  _gtb_run_subcommand ${FUNCNAME[0]#_gtb_} "$@"
}

_gtb_student_org_join() {
  local TRAINER_FULLNAME=${1:?Trainer fullname is required! (e.g. zhang.zhe, wang.ke)}
  shift

  local trainer_username=$(_gtb_trainer_username $TRAINER_FULLNAME)
  assert_not_empty "Cannot find '$TRAINER_FULLNAME' in ${GTB_TRAINERS_FILE}!" "$trainer_username"

  local student_lines=$(_gtb_filter_students "$@")
  local students_count=$(_gtb_count_lines "$student_lines")
  assert_not_empty "error: cannot find any students with filters: '$@'!" "$student_lines"

  local orgs_to_join=$(echo "$student_lines" |
    _gtb_cuts 2,7 |
    env_parallel --jobs $JOBS $GTB_PARALLEL_OPT_PROGRESS_BAR --linebuffer --colsep ' ' gh_membership "{1}" "{2}" "$trainer_username" |
    grep --color=never 'admin pending')
  assert_not_empty "no pending admin invitations to join!" "$orgs_to_join"

  echo "$orgs_to_join" | _gtb_sort 1 | _gtb_table_format

  if [[ "false" == "$GTB_YES" ]]; then
    read -p "about to JOIN above student orgs? (y|n) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
      return 1
    fi
  fi

  for ORG in $(echo "$orgs_to_join" | _gtb_cuts 2); do
    run "open -g https://github.com/orgs/${ORG}/invitation"
    sleep .5
  done
}

_gtb_student_group() {
  local GROUPS_COUNT=${1:?error: <GROUPS_COUNT> is required!}
  shift

  _gtb_filter_students "$@" |
    shuf |
    cut -d' ' -f2 |
    xargs -n$GROUPS_COUNT echo |
    datamash transpose --no-strict -t' ' |
    sed 's: N/A::' |
    _gtb_table_format
}


_gtb_student_repo_open() {
  local REPO_NAME=${1:?Repo name is required!}
  shift

  if [[ $# -eq 0 ]]; then
    fail 'At least one filter is required to match student with name, term, or tags, etc. (e.g. gtb student repo open bronze-java-level-1 zhang.san)'
  fi

  _gtb_filter_students "$@" |
    _gtb_cuts 2 |
    env_parallel \
      --linebuffer \
      --jobs 1 \
      $GTB_PARALLEL_OPT_PROGRESS_BAR \
      _gtb_open "https://github.com/{}/$REPO_NAME"
}

_gtb_student_repo_show() {
  local REPO_NAME=${GTB_REPO:?repo name should be provided using --repo option.}

  local student_lines="$(_gtb_filter_students "$@")"

  echo "$student_lines" |
    cut -d' ' -f2 |
    env_parallel --jobs $JOBS $GTB_PARALLEL_OPT_PROGRESS_BAR --linebuffer gh_show_org_repo {1} $REPO_NAME |
    _gtb_sort "${GTB_SORT_ORDER:-3,3;1,1}" |
    _gtb_cuts "${GTB_FIELDS:-1-}" |
    _gtb_table_format |
    _gtb_highlight \
      "$STATUS_FOUND" green \
      "$STATUS_NOT_FOUND" red
}

_gtb_student_repo_check() {
  local -r REPO_NAME=${1:?Repo name is required!}
  shift 1

  local -r REPO_DIR=$(_gtb_default_repo_dir $REPO_NAME)
  if [[ -d $REPO_DIR ]]; then
    _gtb_update_default_repo "${REPO_NAME}"
  else
    _gtb_clone_default_repo "${REPO_NAME}"
  fi

  local COMMIT_REF=$(_gtb_last_commit_of_branch $REPO_NAME origin/master)
  local student_lines=$(_gtb_filter_students "$@")

  join -1 1 -2 2 -a 1 -o '2.1,1.1' -e 'NotFound' \
    <(echo "$student_lines" | cut -d' ' -f2 | sort) \
    <(echo "$student_lines" | cut -d' ' -f2 |
      env_parallel --jobs $JOBS $GTB_PARALLEL_OPT_PROGRESS_BAR --linebuffer gh_show_org_repo_commit {1} $REPO_NAME $COMMIT_REF |
      sort -k2) |
    _gtb_sort "1,1r;2,2" |
    _gtb_table_format |
    _gtb_highlight \
      'OK' green \
      'ERROR' red
}

_gtb_student_repo_list() {
  local student_orgs=$(_gtb_filter_students "$@" | cut -d' ' -f2)
  assert_not_empty "error: cannot find any students with filters: '$@'!" "$student_orgs"

  echo "$student_orgs" |
    env_parallel \
      --jobs $JOBS \
      --colsep ' ' \
      $GTB_PARALLEL_OPT_PROGRESS_BAR --linebuffer \
      gh_list_org_repos {1} |
    _format_repo_time_fields |
    _gtb_sort "4,4;2,2" |
    _gtb_cuts "${GTB_FIELDS:-1-}" |
    _gtb_table_format |
    sed "s/ public / $(red public) /"
}

_gtb_student_repo_stat() {
  local student_lines=$(_gtb_filter_students "$@")

  assert_not_empty "error: cannot find any students with filters: '$@'!" "$student_lines"

  local result=$(echo "$student_lines" |
    cut -d' ' -f2 |
    env_parallel \
      --jobs $JOBS \
      --colsep ' ' \
      $GTB_PARALLEL_OPT_PROGRESS_BAR --linebuffer \
      gh_list_org_repos {1})

  pr -m -t \
    <(echo "$result" | cut -d' ' -f1 | sort | uniq -c | sort -nr) \
    <(echo "$result" | cut -d' ' -f2 | sort | uniq -c | sort -nr) |
    nl
}

_gtb_student_repo_create() {
  local REPO_NAMES=${GTB_REPO:?repo names should be provided using --repo option. (e.g. --repo 'bronze-java-level-1', --repo 'bronze-java-level-1,bronze-java-level-2'}

  local student_lines=$(_gtb_filter_students "$@")
  assert_not_empty "error: cannot find any students with filters: '$@'!" "$student_lines"

  env_parallel \
    $GTB_PARALLEL_OPT_PROGRESS_BAR \
    --linebuffer \
    --jobs $JOBS \
    gh_create_org_repo \
    :::: <(echo "$student_lines" | _gtb_cuts 2) \
    :::: <(echo "$REPO_NAMES" | tr ',; ' '\n')
}

_gtb_student_repo_clone() {
  REPO_NAME=${1:?Repo name is required! (e.g. homework-xxx-xxx, assignment-xxx-xxx, etc.)}
  shift

  clone_or_update_repos "$@"
}

_gtb_student_repo_delete() {
  local REPO_NAME=${1:?Repo name is required!}
  shift

  local student_lines=$(_gtb_filter_students "$@")
  local students_count=$(_gtb_count_lines "$student_lines")
  assert_not_empty "error: cannot find any students with filters: '$@'!" "$student_lines"

  echo "$student_lines" | _gtb_table_format
  read -p "Are you SURE to delete repo '$(red $REPO_NAME)' from above $(red $students_count) students? (y|n) " -n 1 -r
  echo
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    return 1
  fi

  echo "$student_lines" | cut -d' ' -f2 |
    _gtb_remove_remote_student_repo $REPO_NAME |
    env_parallel --jobs $JOBS --colsep ' ' $GTB_PARALLEL_OPT_PROGRESS_BAR --linebuffer gh_delete_repo {1} {2} |
    _gtb_table_format
}

_gtb_student_repo_update() {
  AUTO_UPDATE="true"
  REPO_NAME=${1:?Repo name is required! (e.g. B-spring-config-homework, F-jest-homework, etc.)}
  shift

  clone_or_update_repos "$@"
}

_gtb_student_repo_remove() {
  _gtb_student_repo_delete "$@"
}

_gtb_student_org() {
  _gtb_run_subcommand ${FUNCNAME[0]#_gtb_} "$@"
}

_gtb_student_user_check() {
  local student_lines=$(_gtb_filter_students "$@")
  assert_not_empty "error: cannot find any students with filters: '$@'!" "$student_lines"

  echo "$student_lines" |
    env_parallel \
      --linebuffer \
      --jobs $JOBS \
      --colsep ' ' \
      $GTB_PARALLEL_OPT_PROGRESS_BAR \
      gh_check_user "{4}" "{2}" "{7}" |
    _gtb_sort '1,1r;3;3' |
    _gtb_table_format |
    _gtb_tr_symbols
}

_gtb_student_org_check() {
  local TRAINER_FULLNAME
  local ORG_CHECK_RESULT
  local MEMBER_CHECK_RESULT

  if _gtb_trainer_show "$1" 1>/dev/null 2>&1; then
    TRAINER_FULLNAME="$1"
    shift
  fi

  if [[ "$CHECK_ROLE_ONLY" == "false" ]]; then
    header "Checking presence of student org..."
    ORG_CHECK_RESULT="$(_gtb_check_student_org_for_presence "$@")"
  else
    ORG_CHECK_RESULT="$(_gtb_filter_students "$@" |
      cut -d' ' -f'2,7' |
      sed 's/^/no_check /')"
  fi

  ORG_CHECK_RESULT="$(echo "$ORG_CHECK_RESULT" | sort -k'3,3')"

  if [[ -z "$TRAINER_FULLNAME" ]]; then
    MEMBER_CHECK_RESULT=""
  else
    header "Checking trainer's role in student org..."
    MEMBER_CHECK_RESULT="$(_gtb_check_student_org_for_trainer_role "$TRAINER_FULLNAME" "$@")"
  fi

  MEMBER_CHECK_RESULT="$(echo "$MEMBER_CHECK_RESULT" | sort -k'4,4')"

  join -1 3 -2 4 -a 1 -o '2.1,2.2,1.3,1.2,1.1,2.5,2.6' -e 'ERROR' \
    <(echo "$ORG_CHECK_RESULT") \
    <(echo "$MEMBER_CHECK_RESULT") |
    sort -k5,7 -k4,4 -k3,3 |
    _gtb_table_format |
    _gtb_highlight \
      'created' green \
      'not_found' red \
      'no_check' yellow \
      'admin' green \
      'active' green \
      'pending' blue \
      'member' yellow \
      'not_a_member' red \
      '404' red \
      'ERROR' red
}

_gtb_student_org_open() {
  local student_lines=$(_gtb_filter_students "$@")
  assert_not_empty "error: cannot find any students with filters: '$@'!" "$student_lines"

  echo "$student_lines" |
    _gtb_cuts 2 |
    env_parallel \
      --linebuffer \
      --jobs 1 \
      $GTB_PARALLEL_OPT_PROGRESS_BAR \
      _gtb_open "https://github.com/{}"
}

_gtb_student_org_remove() {
  local student_lines=$(_gtb_filter_students "$@")
  local students_count=$(_gtb_count_lines "$student_lines")

  echo "$student_lines" |
    _gtb_cuts 2,4,7 |
    sort |
    column -t |
    cat -n

  if [[ "false" == "$GTB_YES" ]]; then
    read -p "about to DELETE ${students_count} students from their orgs? (y|n) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
      return 1
    fi
  fi

  echo "$student_lines" |
    _gtb_cuts 2,4 |
    env_parallel \
      $GTB_PARALLEL_OPT_PROGRESS_BAR \
      --colsep ' ' \
      --linebuffer \
      --jobs $JOBS \
      gh_remove_user_from_org {1} {2}
}

_gtb_student_org_delete() {
  local student_lines=$(_gtb_filter_students "$@")
  assert_not_empty "error: cannot find any students with filters: '$@'!" "$student_lines"

  echo "$student_lines" |
    _gtb_cuts 2 |
    env_parallel \
      --linebuffer \
      --jobs 1 \
      $GTB_PARALLEL_OPT_PROGRESS_BAR \
      _gtb_open "https://github.com/organizations/{}/settings/profile#rename-org-dialog"
}

_gtb_student_user() {
  _gtb_run_subcommand ${FUNCNAME[0]#_gtb_} "$@"
}

_gtb_student_quit_remove_from_config() {
  info "Delete from student file ..."
  _gtb_student_delete "$@"

  info "Commit changes and push ..."
  _gtb_config_diff
  _gtb_config_commit "chore: $GTB_TERM quit students $@"
  _gtb_config_push
}

_gtb_student_delete() {
  local student_lines=$(_gtb_filter_students "$@")
  assert_not_empty "error: cannot find any students with filters: '$@'!" "$student_lines"

  local students_count=$(_gtb_count_lines "$student_lines")

  echo "$student_lines" |
    sort |
    _gtb_table_format

  if [[ "false" == "$GTB_YES" ]]; then
    read -p "about to DELETE $(red ${students_count}) students from $(red $GTB_STUDENTS_FILE)? (y|n) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
      return 1
    fi
  fi

  echo "$student_lines" |
    _gtb_cuts 7 |
    env_parallel \
      $GTB_PARALLEL_OPT_PROGRESS_BAR \
      --linebuffer \
      --jobs 1 \
      "sed -i.bak -E '/ {} /d' '$GTB_STUDENTS_FILE'"
}

_gtb_student_remove() {
  _gtb_student_delete "$@"
}

_gtb_student_register() {
  local -r PY_NAME="${1:?PinYin name is PinYin is required!}"
  local -r CN_NAME="${2:?chinese name is required!}"
  local -r GITHUB_USERNAME="${3:?GitHub username is required!}"
  local -r TRELLO_EMAIL="${4:?Trello email is required!}"
  local -r UPDATED_AT="$(gdate --iso-8601=seconds)"

  assert_value_exists_in_file $GTB_STUDENTS_FILE 7 "$CN_NAME"

  assert_value_is_uniq_in_file <(grep -v " $CN_NAME " $GTB_STUDENTS_FILE) 1 $PY_NAME
  assert_value_is_uniq_in_file <(grep -v " $CN_NAME " $GTB_STUDENTS_FILE) 4 $GITHUB_USERNAME
  assert_value_is_uniq_in_file <(grep -v " $CN_NAME " $GTB_STUDENTS_FILE) 5 $TRELLO_EMAIL

  gawk -i inplace \
    -v CN_NAME="$CN_NAME" \
    -v PY_NAME="$PY_NAME" \
    -v GITHUB_USERNAME="$GITHUB_USERNAME" \
    -v GITHUB_ORG_NAME="${GTB_TERM}-${PY_NAME//./-}" \
    -v TRELLO_EMAIL="$TRELLO_EMAIL" \
    -v UPDATED_AT="$UPDATED_AT" \
    '{ if ($7 == CN_NAME) { $1=PY_NAME; $2=GITHUB_ORG_NAME; $4=GITHUB_USERNAME; $5=TRELLO_EMAIL; $1=$1; $0=$0; print $0, UPDATED_AT; } else { print $0; } }' \
    "$GTB_STUDENTS_FILE"

  LC_ALL=C sort -u --output $GTB_STUDENTS_FILE $GTB_STUDENTS_FILE
}

_gtb_student_add() {
  local -r CN_NAME="${1:?chinese name is required!}"
  local -r BACKGROUND="${2:?background is required!}"
  local -r OFFICE="${3:?office is required!}"
  local -r UNIT="${4:?unit is required!}"
  local -r JOIN_ON="${5:?join date is required!}"
  local -r WEEK_NUM="$(gdate --date=${JOIN_ON} +%V)"
  local -r TYPE="${6:-formal}" # default to formal, but can be informal

  local -r ENTRY_DATE="9999-12-31"
  local -r TWU_TERM="twu"
  local -r PY_NAME="~PINYIN_NAME~"
  local -r GITHUB_USERNAME="_GITHUB_USERNAME_"
  local -r TRELLO_EMAIL="_TRELLO_EMAIL_"

  assert_value_is_uniq_in_file $GTB_STUDENTS_FILE 7 $CN_NAME

  echo "$PY_NAME ${GTB_TERM}-${PY_NAME//./-} $GTB_TERM $GITHUB_USERNAME $TRELLO_EMAIL $TWU_TERM $CN_NAME $BACKGROUND $OFFICE $UNIT $WEEK_NUM $JOIN_ON $TYPE $ENTRY_DATE" >>$GTB_STUDENTS_FILE
  LC_ALL=C sort -u --output $GTB_STUDENTS_FILE $GTB_STUDENTS_FILE
}

_gtb_student_list_format() {
  if [[ "$GTB_RAW" == "true" ]]; then
    cat
    return 0
  fi

  cat | tr ' ' '|' | sort | _gtb_tabularize | cat -n
}

_gtb_student_list() {
  _gtb_filter_students "$@" |
    _gtb_student_reorder_columns |
    _gtb_sort "${GTB_SORT_ORDER:-13,13;12,12;2,2}" |
    _gtb_cuts "${GTB_FIELDS:-1-10,12-14}" |
    _gtb_table_format
}

_gtb_student_show_format() {
  cat | tr ' ' '\n' | cat -n
}

_gtb_student_show() {
  local -r FULLNAME=${1:?fullname is required! (e.g. zhang.san, li.si, etc.)}

  local -r FILTERED_LINES=$(_gtb_filter_students "${FULLNAME}")
  local -r COUNT=$(_gtb_count_lines "$FILTERED_LINES")
  [[ 1 -ne $COUNT ]] && fail "error: $COUNT lines filtered with filter: '${FULLNAME}', should match exactly one line!"

  echo "$FILTERED_LINES" |
    _gtb_student_reorder_columns |
    tr ' ' '\n' |
    _gtb_table_format
}

_gtb_student_reorder_columns() {
  cat | awk '{fullname=$1;owner=$2;term_name=$3;username=$4;$1=$2=$3=$4="";$0=$0;$1=$1;print term_name, fullname, owner, username, $0}'
}

_gtb_student_repo() {
  _gtb_run_subcommand ${FUNCNAME[0]#_gtb_} "$@"
}

_gtb_check_student_org_for_trainer_role() {
  assert_trainers_file_exists

  local TRAINER_FULLNAME=${1:?Trainer fullname is required! (e.g. zhang.zhe, wang.ke)}
  shift

  local trainer_username=$(_gtb_trainer_username $TRAINER_FULLNAME)
  assert_not_empty "Cannot find '$TRAINER_FULLNAME' in ${GTB_TRAINERS_FILE}!" "$trainer_username"

  _gtb_filter_students "$@" |
    _gtb_cuts 2,7 |
    env_parallel \
      $GTB_PARALLEL_OPT_PROGRESS_BAR \
      --jobs $JOBS \
      --colsep ' ' \
      --linebuffer \
      gh_membership "{1}" "{2}" "$trainer_username" |
    sed "s/^/$TRAINER_FULLNAME /"
}

_gtb_check_student_org_for_presence() {
  _gtb_filter_students "$@" |
    cut -d' ' -f'2,7' |
    env_parallel --jobs $JOBS $GTB_PARALLEL_OPT_PROGRESS_BAR --linebuffer --colsep ' ' gh_find_org {1} {2}
}

_gtb_student_quit() {
  local student_lines=$(_gtb_filter_students "$@")
  assert_not_empty "error: cannot find any students with filters: '$@'!" "$student_lines"

  local students_count=$(_gtb_count_lines "$student_lines")
  [[ 1 -ne "$students_count" ]] && fail "error: $students_count lines filtered with filter: '$@', should match exactly one line!"

  echo "$student_lines" |
    sort |
    _gtb_table_format

  if [[ "false" == "$GTB_YES" ]]; then
    read -p "about to QUIT above $(red ${students_count}) students? (y|n) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
      return 1
    fi
  fi

  local students_name=$(echo "$student_lines" | _gtb_cuts 1)
  if [[ $students_name != "$GTB_PY_NAME_DEFAULT" ]]; then
    info "Remove from coachee GitHub org..."
    _gtb_student_org_remove "$@"

    echo "Check whether coachee removed from GitHub org..."
    gh_check_user_not_in_org "$@"

    if [[ "false" == "$GTB_QUIT_EMPLOYEE" ]]; then
        while read -r STUDENT_FULLNAME ORG_NAME OTHER; do
          while read -r BUDDY_NAME BUDDEE_NAME; do
            info "Delete mapping to buddy '${BUDDY_NAME}' ..."
            GTB_BUDDY_FILTER="${BUDDY_NAME}" _gtb_buddy_mapping_remove "${BUDDEE_NAME}"
          done < <(_gtb_filter_buddies_mapping "2" "${STUDENT_FULLNAME}")

          info "Show existing assignment submissions..."
          GTB_FIELDS="1-4,6-8" _gtb_assignment_submission_list "${STUDENT_FULLNAME}"

          info "Delete assignment submissions..."
          GTB_ORG_NAME="${ORG_NAME}" _gtb_assignment_submission_delete
        done < <(echo "${student_lines}")
    fi

    for BOARD_NAME in $(_gtb_trello boards); do
      info "Remove from Trello board '$BOARD_NAME' ..."
      GTB_TRELLO_BOARD_NAME="${BOARD_NAME}"
      _gtb_trello board remove "$@"
    done
  fi

  if [[ "false" == "$GTB_QUIT_EMPLOYEE" ]]; then
    _gtb_student_quit_remove_from_config "$@"
  fi
}
