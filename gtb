#!/bin/bash

GTB_ROOT="${GTB_ROOT:-$HOME/code/gtb}"
GTB_STUDENTS_FILE="${GTB_STUDENTS_FILE:-$GTB_ROOT/students.txt}"
SUBCMD_PREFIX='_gtb'

SUBCOMMAND=${1:?Subcommand is required! (e.g. init, clone, build, update.)}
shift

info() {
    echo "$(tput setaf 4)$(tput bold)$*$(tput sgr 0)"
}

warn() {
    echo "$(tput setaf 3)$(tput bold)$*$(tput sgr 0)"
}

error() {
    echo "$(tput setaf 1)$(tput bold)$*$(tput sgr 0)" >&2
}

debug() {
    echo "$(tput setaf 5)$(tput bold)$*$(tput sgr 0)"
}

run() {
    echo "$(tput setaf 2)$*$(tput sgr 0)"
    eval $*
}

build_repo() {
    local repo_name=$1
    local fullname=$2
    local HOMEWORK_ROOT="$GTB_ROOT/$repo_name"
    local STUDENT_HOMEWORK_PATH="$HOMEWORK_ROOT/$fullname"

    if [[ ! -d $STUDENT_HOMEWORK_PATH ]]
    then
        error "Skip building repo \`$STUDENT_HOMEWORK_PATH\` due to folder is not exist!"
        return
    fi

    run "cd $STUDENT_HOMEWORK_PATH"

    if [[ -f "package.json" ]]; then
        run "yarn"
    elif [[ -f "build.gradle" ]]; then
        run "./gradlew --console plain build </dev/null"
    else
        error "Failed to build project due to unknown build tool!"
    fi
}

clone-repo() {
    local repo_name=$1
    local username=$2
    local fullname=$3
    local HOMEWORK_ROOT="$GTB_ROOT/$repo_name"
    local STUDENT_HOMEWORK_PATH="$HOMEWORK_ROOT/$fullname"
    local STUDENT_HOMEWORK_URL="git@github.com:${username}/${repo_name}.git"

    [[ -d $HOMEWORK_ROOT ]] || run "mkdir -p $HOMEWORK_ROOT"

    run "git clone $STUDENT_HOMEWORK_URL $STUDENT_HOMEWORK_PATH"

    if (($?))
    then
        error "Failed to clone repo ${repo_name}.git for student $fullname!"
    fi
}

update-repo() {
    local student_homework_path=$1

    run "cd $student_homework_path"
    run "git pull --rebase"

    if (($?))
    then
        error "Failed to update repo ${student_homework_path}!"
    fi
}

clone_or_update_repo() {
    local repo_name=$1
    local username=$2
    local fullname=$3
    local HOMEWORK_ROOT="$GTB_ROOT/$repo_name"
    local STUDENT_HOMEWORK_PATH="$HOMEWORK_ROOT/$fullname"

    if [[ -d $STUDENT_HOMEWORK_PATH ]] && [[ "$AUTO_UPDATE" == "true" ]]
    then
        update-repo $STUDENT_HOMEWORK_PATH
    elif [[ -d $STUDENT_HOMEWORK_PATH ]] && [[ "$AUTO_UPDATE" != "true" ]]
    then
        info "Repo ${repo_name} for student $fullname has already been downloaded."
    else
        clone-repo $@
    fi
}

build_repos() {
    if [[ "$AUTO_BUILD" != "true" ]]
    then
        return
    fi

    while read -r FULLNAME USERNAME
    do
        if [[ -z "$*" ]] || echo "$@" | grep --silent "\<${FULLNAME}\>"
        then
            build_repo $REPO_NAME $FULLNAME
        fi
    done < $GTB_STUDENTS_FILE
}

clone_or_update_repos() {
    while read -r FULLNAME USERNAME
    do
        if [[ -z "$*" ]] || echo "$@" | grep --silent "\<${FULLNAME}\>"
        then
            clone_or_update_repo $REPO_NAME $USERNAME $FULLNAME
        fi
    done < $GTB_STUDENTS_FILE
}

assert_students_file_exists() {
    if [[ ! -f $GTB_STUDENTS_FILE ]]
    then
        error "Cannot find students file: '$GTB_STUDENTS_FILE'."
        exit 1
    fi
}

_gtb_build() {
    assert_students_file_exists

    AUTO_BUILD="true"
    REPO_NAME=${1:?Repo name is required! (e.g. B-spring-config-homework, F-jest-homework, etc.)}
    shift

    build_repos $@
}

_gtb_update() {
    assert_students_file_exists

    AUTO_UPDATE="true"
    REPO_NAME=${1:?Repo name is required! (e.g. B-spring-config-homework, F-jest-homework, etc.)}
    shift

    clone_or_update_repos $@
    build_repos $@
}

_gtb_clone() {
    assert_students_file_exists

    REPO_NAME=${1:?Repo name is required! (e.g. B-spring-config-homework, F-jest-homework, etc.)}
    shift

    clone_or_update_repos $@
    build_repos $@
}

_gtb_init() {
    if [[ ! -f $GTB_STUDENTS_FILE ]]
    then
        mkdir -p $GTB_ROOT
        touch $GTB_STUDENTS_FILE
        info "Created students file: '$GTB_STUDENTS_FILE'."
    fi
}

# main method starts from here...
if [[ "$(type -t ${SUBCMD_PREFIX}_$SUBCOMMAND)" != 'function' ]]; then
    error "Subcommand \`$SUBCOMMAND\` is INVALID!"
    exit 2
fi

OPTIND=1

AUTO_UPDATE="false"
AUTO_BUILD="false"

while :; do
    case $1 in
        -u|--update)
            AUTO_UPDATE="true"
            ;;
        -b|--build)
            AUTO_BUILD="true"
            ;;
        --)
            shift
            break
            ;;
        -?*)
            error "WARN: Unknown option (ignored): $1"
            ;;
        *)               # Default case: No more options, so break out of the loop.
            break
    esac

    shift
done

${SUBCMD_PREFIX}_${SUBCOMMAND} $@

