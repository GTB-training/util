#!/bin/bash

GTB_ROOT="${GTB_ROOT:-$HOME/code/gtb}"
GTB_TERM="${GTB_TERM:?GTB_TERM should be set! (term01, term02, etc.)}"
GTB_TRAINERS_FILE="${GTB_TRAINERS_FILE:-$GTB_ROOT/trainers.txt}"
GTB_STUDENTS_FILE="${GTB_STUDENTS_FILE:-$GTB_ROOT/students.txt}"
GTB_SONAR_ADDRESS="${GTB_SONAR_ADDRESS:?Please set env GTB_SONAR_ADDRESS correctly! (P.S. Ask ZHANG Zhe)}"
GTB_SONAR_TOKEN="${GTB_SONAR_TOKEN:?Please set env GTB_SONAR_TOKEN correctly! (P.S. Ask ZHANG Zhe)}"
GTB_RANDOM_LIST_FILE="/tmp/gtb_random_list.txt"
GTB_EXCLUDE_DIRS=( --exclude-dir '.git' --exclude-dir 'build' --exclude-dir 'gradle' --exclude-dir 'node_modules' --exclude-dir 'dist' --exclude-dir '.cache' )
GTB_REPOS_DIR="repos"
GTB_TERMS_DIR="terms"
SUBCMD_PREFIX='_gtb'
GTB_DEFAULT_REPO_ROOT="$GTB_ROOT/$GTB_REPOS_DIR/default"

SUBCOMMAND=${1:?Subcommand is required! (e.g. init, clone, build, update, join, test, up, down, check, show, help.)}
shift

cuts() {
    cat | cut -d' ' "$@"
}

info() {
    echo "$(tput setaf 4)$(tput bold)$*$(tput sgr 0)"
}

warn() {
    echo "$(tput setaf 3)$(tput bold)$*$(tput sgr 0)"
}

error() {
    echo "$(tput setaf 1)$(tput bold)$*$(tput sgr 0)" >&2
}

debug() {
    echo "$(tput setaf 5)$(tput bold)$*$(tput sgr 0)"
}

run() {
    echo "$(tput setaf 2)$*$(tput sgr 0)" 1>&2
    eval $*
}

header() {
    tput setaf 15
    tput setab 8
    printf "%-80s" "$*" 1>&2
    tput sgr0
    printf "\n" 1>&2
}

logt() {
    local fg_color=$1
    local bg_color=$2
    shift 2
    echo "$(tput setab $bg_color)$(tput setaf $fg_color)$*$(tput sgr 0)"
}

logtf() {
    local fg_color=$1
    shift
    echo "$(tput setaf $fg_color)$*$(tput sgr 0)"
}

logtb() {
    local bg_color=$1
    shift
    echo "$(tput setab $bg_color)$*$(tput sgr 0)"
}

logtn() {
    local fg_color=$1
    local bg_color=$2
    shift 2
    echo -n "$(tput setab $bg_color)$(tput setaf $fg_color)$*$(tput sgr 0)"
}

fail() {
    error $*
    exit 1
}

strip_colors() {
    while read -r line
    do
        echo "$line" | \
            sed $'s,\x1b\\[[0-9;]*[a-zA-Z],,g'
    done
}

_gtb_default_repo_dir() {
    local REPO_NAME=${1:?Repo name is required!}
    echo "$GTB_DEFAULT_REPO_ROOT/$REPO_NAME"
}

_gtb_run_subcommand() {
    COMMAND=${1:?Command is required! (e.g. repo, student.)}
    shift
    SUBCOMMAND=${1:?Subcommand is required! (e.g. list, add, remove.)}
    shift

    local subcommand_function="_gtb_${COMMAND}_${SUBCOMMAND}"

    if [[ "$(type -t $subcommand_function)" != 'function' ]]; then
        fail "error: Unknown subcommand: $SUBCOMMAND"
    fi

    $subcommand_function "$@"
}

gh_membership() {
    local ORG=${1:?org is required!}
    local USERNAME=${2:?username is required!}
    gh api "/orgs/${ORG}/memberships/${USERNAME}" 2>/dev/null | jsonpp
}

gh_is_pending() {
    cat | grep --silent '"state": "pending"'
}

gh_is_active() {
    cat | grep --silent '"state": "active"'
}

gh_is_active_admin() {
    cat | grep -A1 '"state": "active"' | grep --silent '"role": "admin"'
}

gh_is_active_member() {
    cat | grep -A1 '"state": "active"' | grep --silent '"role": "member"'
}

gh_is_pending_admin() {
    cat | grep -A1 '"state": "pending"' | grep --silent '"role": "admin"'
}

gh_is_pending_member() {
    cat | grep -A1 '"state": "pending"' | grep --silent '"role": "member"'
}

gh_create_invitation() {
    local ORG=${1:?Org is required!}
    local INVITEE_ID=${2:?Invitee ID is required!}
    gh api /orgs/${ORG}/invitations -F role=admin -F invitee_id=$INVITEE_ID 2>/dev/null
}

gh_is_invitation_created() {
    cat | grep --silent '"created_at":'
}

gh_list_org_repos() {
    local ORG=${1:-tws-graduate-program}
    local TEAM=${2}

    local ENDPOINT="/orgs/$ORG/repos?per_page=100"
    if [[ -n "$TEAM" ]]
    then
        ENDPOINT="/orgs/$ORG/teams/$TEAM/repos?per_page=100"
    fi

    run "gh api $ENDPOINT 2>/dev/null" | jsonpp | \
        grep '    "name":\|    "private":' | \
        tr -d '", ' | \
        cut -d':' -f2 | \
        paste -d' ' - - | \
        sort | \
        sed -e 's/ true$//' -e 's/false$/🟢/'
}

gh_show_org_repo() {
    local ORG=${1:?Org is required!}
    local REPO_NAME=${2:?Repo name is required!}

    local ENDPOINT="/repos/$ORG/$REPO_NAME"
    local OUTPUT="$ORG $REPO_NAME"

    gh api $ENDPOINT 1>/dev/null 2>&1

    local result=$?
    if [[ $result -eq 0 ]]; then
        echo $OUTPUT
    else
        error $OUTPUT
    fi

    return $result
}

gh_secret_list() {
    local ORG=${1:?Org is required!}
    local REPO_NAME=${2:?Repo name is required!}

    gh secret list -R $ORG/$REPO_NAME 2>/dev/null
}

gh_list_repo_workflow_runs() {
    local ORG=${1:?Org is required!}
    local REPO_NAME=${2:?Repo name is required!}
    local WORKFLOW_FILENAME=${3:?Workflow filename is required!}

    run "gh api /repos/$ORG/$REPO_NAME/actions/workflows/$WORKFLOW_FILENAME/runs?per_page=10 2>/dev/null" | \
        jsonpp | \
        sed -e 's/: "//' -e 's/",//' | \
        sed -e 's/": /"/' -e 's/,$//' | \
        grep '^      "\(run_number\|name\|status\|conclusion\|created_at\|updated_at\)"' | \
        cut -d'"' -f3 | \
        paste -d'|' - - - - - - | \
        column -s'|' -t
}

gh_run_repo_workflow() {
    local ORG=${1:?Org is required!}
    local REPO_NAME=${2:?Repo name is required!}
    local WORKFLOW_FILENAME=${3:?Workflow filename is required!}
    local ENDPOINT="/repos/$ORG/$REPO_NAME/actions/workflows/$WORKFLOW_FILENAME/dispatches"

    (run "gh api -X POST $ENDPOINT -F ref=master 2>/dev/null" || logtf 32 $(_gtb_actions_url $ORG $REPO_NAME) >&2) | jsonpp
}

gh_workflow_list() {
    local ORG=${1:?Org is required!}
    local REPO_NAME=${2:?Repo name is required!}

    run "gh api /repos/$ORG/$REPO_NAME/actions/workflows 2>/dev/null" | jsonpp | \
        grep '^      "\(name\|path\|state\)":' | \
        cut -d'"' -f4 | \
        paste -d'|' - - - | \
        column -s'|' -t | \
        sort
}

gh_remove_repo_secret() {
    local ORG=${1:?Org is required!}
    local REPO_NAME=${2:?Repo name is required!}
    local NAME=${3:?Secret name is required!}

    local response=$(gh secret -R $ORG/$REPO_NAME remove $NAME 2>&1)

    if echo $response | grep --silent "Removed secret wang from"; then
        echo "✓ Removed secret $NAME from $ORG/$REPO_NAME"
        return 0
    fi

    if echo $response | grep --silent 'failed to delete secret wang: HTTP 404'; then
        echo "✓ Removed secret $NAME from $ORG/$REPO_NAME"
        return 0
    fi

    error $response
    return 1
}

gh_set_repo_secret() {
    local ORG=${1:?Org is required!}
    local REPO_NAME=${2:?Repo name is required!}
    local NAME=${3:?Secret name is required!}
    local VALUE=${4:?Secret value is required!}

    gh secret -R $ORG/$REPO_NAME set $NAME -b"$VALUE"
}

gh_init_repo_secrets() {
    local ORG=${1:?Org is required!}
    local REPO_NAME=${2:?Repo name is required!}
    local TERM=${3:?Term is required!}
    local FULLNAME=${4:?Fullname is required!}

    local secrets=$(gh_secret_list $ORG $REPO_NAME | cut -f1)

    if ! echo $secrets | grep --silent SONAR_ADDRESS; then
        gh_set_repo_secret $ORG $REPO_NAME SONAR_ADDRESS $GTB_SONAR_ADDRESS
    fi
    if ! echo $secrets | grep --silent SONAR_TOKEN; then
        gh_set_repo_secret $ORG $REPO_NAME SONAR_TOKEN $GTB_SONAR_TOKEN
    fi
    if ! echo $secrets | grep --silent STUDENT_TERM; then
        gh_set_repo_secret $ORG $REPO_NAME STUDENT_TERM $TERM
    fi
    if ! echo $secrets | grep --silent STUDENT_NAME; then
        gh_set_repo_secret $ORG $REPO_NAME STUDENT_NAME $FULLNAME
    fi
}

gh_create_org_repo() {
    local ORG=${1:?Org is required!}
    local REPO_NAME=${2:?Repo name is required!}

    local response=$(run "gh api -X POST /orgs/$ORG/repos -F private=true -F name=$REPO_NAME 2>/dev/null" | jsonpp)

    if echo $response | grep --silent "\"full_name\": \"$ORG/$REPO_NAME\""; then
        return 0
    fi

    if echo $response | grep --silent '"message": "name already exists on this account"'; then
        return 0
    fi

    error $response
    return 1
}

gh_delete_repo() {
    local OWNER=${1:?Owner is required!}
    local REPO_NAME=${2:?Repo name is required!}

    local response=$(run "gh api -X DELETE /repos/$OWNER/$REPO_NAME 2>/dev/null")

    if [[ "$response" == "" ]]; then
        return 0
    fi

    if echo $response | grep --silent '"message":"Not Found"'; then
        return 0
    fi

    error $response
    return 1
}

gh_clone_repo() {
    local OWNER=${1:?Owner is required!}
    local REPO_NAME=${2:?Repo name is required!}
    local DIR=${3:?Director is required!}

    run "gh repo clone $OWNER/$REPO_NAME $DIR"
}

build_repo() {
    local repo_name=$1
    local fullname=$2
    local term_name=$3
    local HOMEWORK_ROOT="$GTB_ROOT/$GTB_TERMS_DIR/$term_name/$repo_name"
    local STUDENT_HOMEWORK_PATH="$HOMEWORK_ROOT/$fullname"

    if [[ ! -d $STUDENT_HOMEWORK_PATH ]]
    then
        error "Skip building repo \`$STUDENT_HOMEWORK_PATH\` due to folder is not exist!"
        return
    fi

    run "cd $STUDENT_HOMEWORK_PATH"

    if [[ -f "package.json" ]]; then
        run "yarn"
    elif [[ -f "build.gradle" ]]; then
        run "./gradlew build </dev/null"
    else
        error "Failed to build project due to unknown build tool!"
    fi
}

clone_repo() {
    local repo_name=$1
    local username=$2
    local fullname=$3
    local term_name=$4
    local HOMEWORK_ROOT="$GTB_ROOT/$GTB_TERMS_DIR/$term_name/$repo_name"
    local STUDENT_HOMEWORK_PATH="$HOMEWORK_ROOT/$fullname"
    local STUDENT_HOMEWORK_URL="git@github.com:${username}/${repo_name}.git"

    [[ -d $HOMEWORK_ROOT ]] || run "mkdir -p $HOMEWORK_ROOT"

    run "git clone $STUDENT_HOMEWORK_URL $STUDENT_HOMEWORK_PATH"

    if (($?))
    then
        error "Failed to clone repo ${repo_name}.git for student $fullname!"
    fi
}

update_repo() {
    local student_homework_path=$1

    run "cd $student_homework_path"
    run "git pull --rebase"

    if (($?))
    then
        error "Failed to update repo ${student_homework_path}!"
    fi
}

clone_or_update_repo() {
    local repo_name=$1
    local fullname=$3
    local term_name=$4
    local HOMEWORK_ROOT="$GTB_ROOT/$GTB_TERMS_DIR/$term_name/$repo_name"
    local STUDENT_HOMEWORK_PATH="$HOMEWORK_ROOT/$fullname"

    if [[ -d $STUDENT_HOMEWORK_PATH ]] && [[ "$AUTO_UPDATE" == "true" ]]
    then
        update_repo $STUDENT_HOMEWORK_PATH
    elif [[ -d $STUDENT_HOMEWORK_PATH ]] && [[ "$AUTO_UPDATE" != "true" ]]
    then
        info "Repo ${repo_name} for student $fullname has already been downloaded."
    else
        clone_repo $@
    fi
}

join_repos() {
    readonly INVITATIONS_FILE="/tmp/gtb_invatations_${REPO_NAME}.txt"

    gh api '/user/repository_invitations?per_page=100' | jsonpp | \
        grep --color=never '^    "id":\|^      "name":\|^        "login":' | \
        paste -d' ' - - - | \
        tr -d ', :' | tr -s '"' | tr '"' ' ' | \
        grep --color=never "${REPO_NAME}" > $INVITATIONS_FILE

    readonly login_list_size=$(cat $INVITATIONS_FILE | wc -l | tr -d ' ')

    if [[ 0 -eq $login_list_size ]]
    then
        info "Found $login_list_size invitations for repo ${REPO_NAME}."
        return
    fi

    info "Found $login_list_size invitations for repo ${REPO_NAME} from following users:"
    cat $INVITATIONS_FILE | cut -d' ' -f7 | \
        xargs -I % grep '\<%\>' $GTB_STUDENTS_FILE | \
        cut -d' ' -f1-2 | sort | cat -n

    if [[ "$AUTO_ACCEPT" == "false" ]]
    then
        return
    fi

    while read -r cid id cname name clogin login
    do
        info "about to accept invitation from user ${login}..."
        run "gh api -X PATCH --silent /user/repository_invitations/${id}"

        [[ $? -eq 0 ]] && info "DONE" || error "FAILED"
    done < $INVITATIONS_FILE
}

build_repos() {
    if [[ "$AUTO_BUILD" != "true" ]]
    then
        return
    fi

    while read -r FULLNAME USERNAME TERM_NAME TAGS
    do
        if echo "$TERM_NAME" | grep --silent "$GTB_TERM"
        then
            if [[ -z "$*" ]] || echo "$@" | grep --silent "\<${FULLNAME}\>" || echo "$TAGS" | grep --silent "\<$1\>"
            then
                build_repo $REPO_NAME $FULLNAME $TERM_NAME
            fi
        fi
    done < $GTB_STUDENTS_FILE
}

clone_or_update_repos() {
    while read -r FULLNAME USERNAME TERM_NAME TAGS
    do
        if echo "$TERM_NAME" | grep --silent "$GTB_TERM"
        then
            if [[ -z "$*" ]] || echo "$@" | grep --silent "\<${FULLNAME}\>" || echo "$TAGS" | grep --silent "\<$1\>"
            then
                clone_or_update_repo $REPO_NAME $USERNAME $FULLNAME $TERM_NAME
            fi
        fi
    done < $GTB_STUDENTS_FILE
}

assert_not_empty() {
    if [[ -z "$2" ]]
    then
        fail "$1"
    fi
}

assert_trainers_file_exists() {
    if [[ ! -f $GTB_TRAINERS_FILE ]]
    then
        fail "Cannot find trainers file: '$GTB_TRAINERS_FILE'."
    fi
}

assert_students_file_exists() {
    if [[ ! -f $GTB_STUDENTS_FILE ]]
    then
        error "Cannot find students file: '$GTB_STUDENTS_FILE'."
        exit 1
    fi
}

extract_comment_context() {
    while read -r line
    do
        echo "$line" | \
            sed 's:^.*TODO ::' | \
            sed 's: \{0,\}-->$::' | \
            sed 's: \{0,\}\*/}$::' | \
            sed 's: \{0,\}\*/$::' | \
            cut -d' ' -f2-
    done
}

extract_summary_comments_for_dimension() {
    local DIMENSION=${1:?dimension code is required!}
    grep "TODO GTB-\(${DIMENSION}\): \*" -R ${GTB_EXCLUDE_DIRS[@]} * | \
        extract_comment_context
}

extract_detail_comments_for_dimension() {
    local DIMENSION=${1:?dimension code is required!}
    local SYMBOL=${2:?symbol is required!}

    grep "TODO GTB-\(${DIMENSION}\): ${SYMBOL}" -R ${GTB_EXCLUDE_DIRS[@]} * | \
        extract_comment_context | \
        sed "s:^:${SYMBOL} \\\\:"
}

prepare_run_context() {
    local HOMEWORK_ROOT=${1:?homework root is required!}
    local HOMEWORK_TESTS_ROOT=${2:?homework tests root is required!}
    local REPO_NAME=${3:?repository name is required!}

    info "Start preparing run context..."
    cd "$HOMEWORK_ROOT"
    cp ${HOMEWORK_TESTS_ROOT}/docker/* .
    cp settings.gradle settings.gradle.backup
    echo "rootProject.name = '${REPO_NAME}'" > settings.gradle
}

clear_run_context() {
    local HOMEWORK_ROOT=${1:?homework root is required!}

    info "Start clearing run context..."
    cd "$HOMEWORK_ROOT"
    for f in `echo ${HOMEWORK_TESTS_ROOT}/docker/*`; do
        rm `basename $f`
    done
    mv settings.gradle.backup settings.gradle
}

ensure_application_is_ready() {
    local TIMEOUT=${1:?timeout is required!}

    timeout ${TIMEOUT}s bash << "EOF"
while :; do
    sleep 1; curl http://localhost:8080 > /dev/null 2>&1
    [[ "$?" -eq 0 ]] && break
done
EOF

    return $?
}

strip_blank_details_block() {
    cat $1 | \
        tr '\n' '\t' | \
        sed 's/__Details:__		/__Details:__	/g' | \
        sed 's/__Details:__			//g' | \
        sed 's/	\{3,\}/		/g' | \
        tr '\t' '\n'
}

extract_and_format_comments() {
    cat <<-EOF
### 完成度：
$(extract_summary_comments_for_dimension '1\|完成度')
$([ -f ./gtb-test-results.md ] && echo '* 具体验收测试结果详见：`gtb-test-results.md`')

__Details:__
$(extract_detail_comments_for_dimension '1\|完成度' '+')
$(extract_detail_comments_for_dimension '1\|完成度' '-')

### 测试：
$(extract_summary_comments_for_dimension '2\|测试')

__Details:__
$(extract_detail_comments_for_dimension '2\|测试' '+')
$(extract_detail_comments_for_dimension '2\|测试' '-')

### 知识点：
$(extract_summary_comments_for_dimension '3\|知识点')

__Details:__
$(extract_detail_comments_for_dimension '3\|知识点' '+')
$(extract_detail_comments_for_dimension '3\|知识点' '-')

### 工程实践：
$(extract_summary_comments_for_dimension '4\|工程实践')

__Details:__
$(extract_detail_comments_for_dimension '4\|工程实践' '+')
$(extract_detail_comments_for_dimension '4\|工程实践' '-')

### 综合：
$(extract_summary_comments_for_dimension '0\|综合')

__Details:__
$(extract_detail_comments_for_dimension '0\|综合' '+')
$(extract_detail_comments_for_dimension '0\|综合' '-')

EOF
}

_gtb_is_a_trainer() {
    if [[ -z "$*" ]]; then
        return 1
    fi

    while read -r FULLNAME USERNAME ID TAGS
    do
        if echo "$*" | grep --silent "\<${FULLNAME}\>" || echo "$*" | grep --silent "\<${USERNAME}\>" || echo "$TAGS" | grep --silent "\<$1\>"
        then
            return 0
        fi
    done < $GTB_TRAINERS_FILE

    return 2
}

_gtb_trainer_id() {
    while read -r FULLNAME USERNAME ID TAGS
    do
        if [[ -z "$*" ]] || echo "$*" | grep --silent "\<${FULLNAME}\>" || echo "$*" | grep --silent "\<${USERNAME}\>" || echo "$TAGS" | grep --silent "\<$1\>"
        then
            echo "$ID"
        fi
    done < $GTB_TRAINERS_FILE
}

_gtb_trainer_username() {
    while read -r FULLNAME USERNAME ID TAGS
    do
        if [[ -z "$*" ]] || echo "$*" | grep --silent "\<${FULLNAME}\>" || echo "$*" | grep --silent "\<${USERNAME}\>" || echo "$TAGS" | grep --silent "\<$1\>"
        then
            echo "$USERNAME"
        fi
    done < $GTB_TRAINERS_FILE
}

_gtb_trainer_fullname() {
    while read -r FULLNAME USERNAME ID TAGS
    do
        if [[ -z "$*" ]] || echo "$*" | grep --silent "\<${FULLNAME}\>" || echo "$*" | grep --silent "\<${USERNAME}\>" || echo "$TAGS" | grep --silent "\<$1\>"
        then
            echo "$FULLNAME"
        fi
    done < $GTB_TRAINERS_FILE
}

_gtb_trainer_list() {
    while read -r FULLNAME USERNAME ID TAGS
    do
        if [[ -z "$*" ]] || echo "$*" | grep --silent "\<${FULLNAME}\>" || echo "$*" | grep --silent "\<${USERNAME}\>" || echo "$TAGS" | grep --silent "\<$1\>"
        then
            echo "$FULLNAME $USERNAME $ID $TAGS"
        fi
    done < $GTB_TRAINERS_FILE
}

_gtb_trainer() {
    assert_trainers_file_exists

    if ! echo $1 | grep --silent '^\(list\|fullname\|username\|id\)$'; then
        set -- list "$@"
    fi

    _gtb_run_subcommand ${FUNCNAME[0]#_gtb_} "$@"
}

_gtb_student_random_clear() {
    _gtb_student_random_reset
}

_gtb_student_random_reset() {
    echo -n > $GTB_RANDOM_LIST_FILE
}

_gtb_student_random_show() {
    cat $GTB_RANDOM_LIST_FILE
}

_gtb_student_random_next() {
    if [[ ! -s $GTB_RANDOM_LIST_FILE ]]
    then
        fail 'error: Please run `gtb student random` to generate random list first.'
    fi

    local next=$(head -n1 $GTB_RANDOM_LIST_FILE)
    local rest=$(tail -n +2 $GTB_RANDOM_LIST_FILE)

    echo "$rest" > $GTB_RANDOM_LIST_FILE
    echo "$next" >> $GTB_RANDOM_LIST_FILE

    echo $next
}

_gtb_student_random_generate() {
    _gtb_student_list "$@" | \
        shuf | \
        cut -d' ' -f2 | \
        cat -n > $GTB_RANDOM_LIST_FILE
}

_gtb_student_random() {
    if ! echo $1 | grep --silent '^\(next\|show\|reset\|clear\)$'; then
        set -- generate "$@"
    fi

    _gtb_run_subcommand ${FUNCNAME[0]#_gtb_} "$@"
}

_gtb_student_org_invite() {
    assert_trainers_file_exists

    local TRAINER_FULLNAME=${1:?Trainer fullname is required! (e.g. qu.hang wang.xiaofeng)}
    shift 1

    local invitee_id=$(_gtb_trainer_id $TRAINER_FULLNAME)
    assert_not_empty "Cannot find '$TRAINER_FULLNAME' in ${GTB_TRAINERS_FILE}!" "$invitee_id"

    while read -r FULLNAME ORG TERM_NAME TAGS
    do
        if echo "$TERM_NAME" | grep --silent "$GTB_TERM"
        then
            if [[ -z "$*" ]] || echo "$*" | grep --silent "\<${FULLNAME}\>" || echo "$*" | grep --silent "\<${ORG}\>" || echo "$TAGS" | grep --silent "\<$1\>"
            then
                local response=$(gh_create_invitation $ORG $invitee_id)
                if echo $response | gh_is_invitation_created; then
                    info "$ORG $TRAINER_FULLNAME"
                else
                    error "$ORG $TRAINER_FULLNAME"
                    echo $response | jsonpp 1>&2
                fi
            fi
        fi
    done < $GTB_STUDENTS_FILE
}

_gtb_student_org_join() {
    local TRAINER_FULLNAME=${1:?Trainer fullname is required! (e.g. zhang.zhe, wang.ke)}
    shift

    local trainer_username=$(_gtb_trainer_username $TRAINER_FULLNAME)
    assert_not_empty "Cannot find '$TRAINER_FULLNAME' in ${GTB_TRAINERS_FILE}!" "$trainer_username"

    while read -r FULLNAME ORG TERM_NAME TAGS
    do
        if echo "$TERM_NAME" | grep --silent "$GTB_TERM"
        then
            if [[ -z "$*" ]] || echo "$*" | grep --silent "\<${FULLNAME}\>" || echo "$*" | grep --silent "\<${ORG}\>" || echo "$TAGS" | grep --silent "\<$1\>"
            then
                if gh_membership $ORG $trainer_username | gh_is_pending_admin; then
                    run "open https://github.com/orgs/${ORG}/invitation"
                    sleep .5
                fi
            fi
        fi
    done < $GTB_STUDENTS_FILE
}

_gtb_check_student_org_for_presence() {
    if _gtb_is_a_trainer $1; then
        shift
    fi

    header "Checking student org for presence..."

    while read -r FULLNAME ORG TERM_NAME TAGS
    do
        if echo "$TERM_NAME" | grep --silent "$GTB_TERM"
        then
            if [[ -z "$*" ]] || echo "$*" | grep --silent "\<${FULLNAME}\>" || echo "$*" | grep --silent "\<${ORG}\>" || echo "$TAGS" | grep --silent "\<$1\>"
            then
                if gh api "/orgs/$ORG" 2>/dev/null | jsonpp | grep --silent "\"login\": \"$ORG\""
                then
                    logtf 28 "$TERM_NAME|$FULLNAME|$ORG|$TAGS"
                else
                    logtf 161 "$TERM_NAME|$FULLNAME|$ORG|$TAGS"
                fi
            fi
        fi
    done < $GTB_STUDENTS_FILE | sort -r | column -s'|' -t
}

_gtb_check_student_org_for_trainer_role() {
    assert_trainers_file_exists

    header "Checking student org for trainer's role which should be admin..."

    local TRAINER_FULLNAME=${1:?Trainer fullname is required! (e.g. zhang.zhe, wang.ke)}
    shift

    local trainer_username=$(_gtb_trainer_username $TRAINER_FULLNAME)
    assert_not_empty "Cannot find '$TRAINER_FULLNAME' in ${GTB_TRAINERS_FILE}!" "$trainer_username"

    while read -r FULLNAME ORG TERM_NAME TAGS
    do
        if echo "$TERM_NAME" | grep --silent "$GTB_TERM"
        then
            if [[ -z "$*" ]] || echo "$*" | grep --silent "\<${FULLNAME}\>" || echo "$*" | grep --silent "\<${ORG}\>" || echo "$TAGS" | grep --silent "\<$1\>"
            then
                local membership=$(gh_membership $ORG $trainer_username)
                if echo $membership | gh_is_active_admin; then
                    logtf 28 "$ORG|active admin"
                elif echo $membership | gh_is_pending_admin; then
                    logtf 32 "$ORG|pending admin"
                elif echo $membership | gh_is_pending_member; then
                    logtf 220 "$ORG|pending member"
                elif echo $membership | gh_is_active_member; then
                    logtf 13 "$ORG|active member"
                else
                    logtf 161 "$ORG|no invitation"
                fi
            fi
        fi
    done < $GTB_STUDENTS_FILE | sort -r | column -s'|' -t

}

_gtb_student_org_check() {
    if [[ "$CHECK_ROLE_ONLY" == "false" ]]; then
        _gtb_check_student_org_for_presence "$@"
    fi

    assert_trainers_file_exists
    if ! _gtb_is_a_trainer $1; then
        return 0
    fi

    echo

    _gtb_check_student_org_for_trainer_role "$@"
}

_gtb_student_org() {
    if ! echo $1 | grep --silent '^\(invite\|check\|join\)$'; then
        set -- check "$@"
    fi

    _gtb_run_subcommand ${FUNCNAME[0]#_gtb_} "$@"
}

_gtb_student_workflow_runs() {
    local REPO_NAME=${1:?Repo name is required!}
    local WORKFLOW_FILENAME=${2:?Workflow filename is required!}
    shift 2

    while read -r FULLNAME ORG TERM_NAME TAGS
    do
        if ! echo "$TERM_NAME" | grep --silent "$GTB_TERM"
        then
            continue
        fi

        if [[ -z "$*" ]] || echo "$*" | grep --silent "\<${FULLNAME}\>" || echo "$*" | grep --silent "\<${ORG}\>" || echo "$TAGS" | grep --silent "\<$1\>"
        then
            header "Runs of workflow $WORKFLOW_FILENAME from repository $ORG/$REPO_NAME..."
            gh_list_repo_workflow_runs $ORG $REPO_NAME $WORKFLOW_FILENAME
        fi
    done < $GTB_STUDENTS_FILE
}

_gtb_student_workflow_run() {
    local REPO_NAME=${1:?Repo name is required!}
    local WORKFLOW_FILENAME=${2:?Workflow filename is required!}
    shift 2

    while read -r FULLNAME ORG TERM_NAME TAGS
    do
        if echo "$TERM_NAME" | grep --silent "$GTB_TERM"
        then
            if [[ -z "$*" ]] || echo "$*" | grep --silent "\<${FULLNAME}\>" || echo "$*" | grep --silent "\<${ORG}\>" || echo "$TAGS" | grep --silent "\<$1\>"
            then
                header "Run repository workflow $WORKFLOW_FILENAME from $ORG/$REPO_NAME..."
                gh_run_repo_workflow $ORG $REPO_NAME $WORKFLOW_FILENAME
            fi
        fi
    done < $GTB_STUDENTS_FILE
}

_gtb_student_workflow_list() {
    local REPO_NAME=${1:?Repo name is required!}
    shift

    while read -r FULLNAME ORG TERM_NAME TAGS
    do
        if echo "$TERM_NAME" | grep --silent "$GTB_TERM"
        then
            if [[ -z "$*" ]] || echo "$*" | grep --silent "\<${FULLNAME}\>" || echo "$*" | grep --silent "\<${ORG}\>" || echo "$TAGS" | grep --silent "\<$1\>"
            then
                header "List repository workflows from $ORG/$REPO_NAME..."
                gh_workflow_list $ORG $REPO_NAME
            fi
        fi
    done < $GTB_STUDENTS_FILE
}

_gtb_student_workflow() {
    if ! echo $1 | grep --silent '^\(list\|run\|runs\)$'; then
        set -- list "$@"
    fi

    _gtb_run_subcommand ${FUNCNAME[0]#_gtb_} "$@"
}

_gtb_student_secret_init() {
    local REPO_NAME=${1:?Repo name is required!}
    shift

    while read -r FULLNAME ORG TERM_NAME TAGS
    do
        if echo "$TERM_NAME" | grep --silent "$GTB_TERM"
        then
            if [[ -z "$*" ]] || echo "$*" | grep --silent "\<${FULLNAME}\>" || echo "$*" | grep --silent "\<${ORG}\>" || echo "$TAGS" | grep --silent "\<$1\>"
            then
                logt 15 27 "Initialize default repository secrets for $ORG/$REPO_NAME..." 1>&2
                gh_init_repo_secrets $ORG $REPO_NAME $TERM_NAME $FULLNAME
            fi
        fi
    done < $GTB_STUDENTS_FILE
}

_gtb_student_secret_remove() {
    local REPO_NAME=${1:?Repo name is required!}
    local NAME=${2:?Secret name is required!}
    shift 2

    while read -r FULLNAME ORG TERM_NAME TAGS
    do
        if ! echo "$TERM_NAME" | grep --silent "$GTB_TERM"
        then
            continue
        fi

        if [[ -z "$*" ]] || echo "$*" | grep --silent "\<${FULLNAME}\>" || echo "$*" | grep --silent "\<${ORG}\>" || echo "$TAGS" | grep --silent "\<$1\>"
        then
            gh_remove_repo_secret $ORG $REPO_NAME $NAME
        fi
    done < $GTB_STUDENTS_FILE
}

_gtb_student_secret_set() {
    local REPO_NAME=${1:?Repo name is required!}
    local NAME=${2:?Secret name is required!}
    local VALUE=${3:?Secret value is required!}
    shift 3

    while read -r FULLNAME ORG TERM_NAME TAGS
    do
        if echo "$TERM_NAME" | grep --silent "$GTB_TERM"
        then
            if [[ -z "$*" ]] || echo "$*" | grep --silent "\<${FULLNAME}\>" || echo "$*" | grep --silent "\<${ORG}\>" || echo "$TAGS" | grep --silent "\<$1\>"
            then
                logt 15 27 "Set repository secret for $ORG/$REPO_NAME..." 1>&2
                gh_set_repo_secret $ORG $REPO_NAME $NAME $VALUE
            fi
        fi
    done < $GTB_STUDENTS_FILE
}

_gtb_student_secret_list() {
    local REPO_NAME=${1:?Repo name is required!}
    shift

    while read -r FULLNAME ORG TERM_NAME TAGS
    do
        if echo "$TERM_NAME" | grep --silent "$GTB_TERM"
        then
            if [[ -z "$*" ]] || echo "$*" | grep --silent "\<${FULLNAME}\>" || echo "$*" | grep --silent "\<${ORG}\>" || echo "$TAGS" | grep --silent "\<$1\>"
            then
                logt 15 27 "List repository secrets from $ORG/$REPO_NAME..." 1>&2
                gh_secret_list $ORG $REPO_NAME
            fi
        fi
    done < $GTB_STUDENTS_FILE
}

_gtb_student_secret() {
    if ! echo $1 | grep --silent '^\(list\|set\|remove\|init\)$'; then
        set -- list "$@"
    fi

    _gtb_run_subcommand ${FUNCNAME[0]#_gtb_} "$@"
}

_gtb_student_repo_delete() {
    local REPO_NAME=${1:?Repo name is required!}
    shift

    read -p "Are you SURE to delete repo '$REPO_NAME' from students' organizaion? (Y|N) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]
    then
        return 1
    fi

    while read -r FULLNAME ORG TERM_NAME TAGS
    do
        if echo "$TERM_NAME" | grep --silent "$GTB_TERM"
        then
            if [[ -z "$*" ]] || echo "$*" | grep --silent "\<${FULLNAME}\>" || echo "$*" | grep --silent "\<${ORG}\>" || echo "$TAGS" | grep --silent "\<$1\>"
            then
                gh_delete_repo $ORG $REPO_NAME
                _gtb_remove_remote_student_repo $ORG $REPO_NAME
            fi
        fi
    done < $GTB_STUDENTS_FILE
}

_gtb_student_repo_create() {
    local REPO_NAME=${1:?Repo name is required!}
    shift

    while read -r FULLNAME ORG TERM_NAME TAGS
    do
        if echo "$TERM_NAME" | grep --silent "$GTB_TERM"
        then
            if [[ -z "$*" ]] || echo "$*" | grep --silent "\<${FULLNAME}\>" || echo "$*" | grep --silent "\<${ORG}\>" || echo "$TAGS" | grep --silent "\<$1\>"
            then
                gh_create_org_repo $ORG $REPO_NAME
            fi
        fi
    done < $GTB_STUDENTS_FILE
}

_gtb_student_repo_list() {
    while read -r FULLNAME ORG TERM_NAME TAGS
    do
        if echo "$TERM_NAME" | grep --silent "$GTB_TERM"
        then
            if [[ -z "$*" ]] || echo "$*" | grep --silent "\<${FULLNAME}\>" || echo "$*" | grep --silent "\<${ORG}\>" || echo "$TAGS" | grep --silent "\<$1\>"
            then
                gh_list_org_repos $ORG
            fi
        fi
    done < $GTB_STUDENTS_FILE
}

_gtb_student_repo_show() {
    local REPO_NAME=${1:?Repo name is required!}
    shift

    while read -r FULLNAME ORG TERM_NAME TAGS
    do
        if echo "$TERM_NAME" | grep --silent "$GTB_TERM"
        then
            if [[ -z "$*" ]] || echo "$*" | grep --silent "\<${FULLNAME}\>" || echo "$*" | grep --silent "\<${ORG}\>" || echo "$TAGS" | grep --silent "\<$1\>"
            then
                gh_show_org_repo $ORG $REPO_NAME
            fi
        fi
    done < $GTB_STUDENTS_FILE
}

_gtb_student_repo() {
    if ! echo $1 | grep --silent '^\(show\|list\|create\|delete\)$'; then
        set -- list "$@"
    fi

    _gtb_run_subcommand ${FUNCNAME[0]#_gtb_} "$@"
}

_gtb_student_group() {
    local GROUPS_COUNT=${1:?error: <GROUPS_COUNT> is required!}
    shift

    _gtb_student_list "$@" | \
        shuf | \
        cut -d' ' -f2 | \
        xargs -n$GROUPS_COUNT echo | \
        datamash transpose --no-strict -t' ' | \
        sed 's: N/A::' | \
        cat -n | \
        column -t
}

_gtb_student_list() {
    while read -r FULLNAME USERNAME TERM_NAME TAGS
    do
        if echo "$TERM_NAME" | grep --silent "$GTB_TERM"
        then
            if [[ -z "$*" ]] || echo "$*" | grep --silent "\<${FULLNAME}\>" || echo "$*" | grep --silent "\<${USERNAME}\>" || echo "$TAGS" | grep --silent "\<$1\>"
            then
                info "$TERM_NAME $FULLNAME $USERNAME $TAGS"
            fi
        fi
    done < $GTB_STUDENTS_FILE
}

_gtb_student_show() {
    local STUDENT_FULLNAME=${1:?Trainee fullname is required! (e.g. zhang.san, li.si, etc.)}

    while read -r FULLNAME USERNAME TERM_NAME TAGS
    do
        if echo "$TERM_NAME" | grep --silent "$GTB_TERM"
        then
            if [[ "$FULLNAME" == "$STUDENT_FULLNAME" ]]
            then
                echo "$TERM_NAME $FULLNAME $USERNAME $TAGS"
                return 0
            fi
        fi
    done < $GTB_STUDENTS_FILE

    return 1
}

_gtb_student() {
    assert_students_file_exists

    _gtb_run_subcommand ${FUNCNAME[0]#_gtb_} "$@"
}

remove_repo_from_team() {
    local ORG=$1
    local TEAM=$2
    local REPO=$3
    local ENDPOINT="/orgs/$ORG/teams/$TEAM/repos/$ORG/$REPO"

    run "gh api --silent -X DELETE $ENDPOINT"

    [[ $? -eq 0 ]] && info "DONE" || error "FAILED"
}

_gtb_actions_url() {
    local ORG=${1:?Org is required!}
    local REPO_NAME=${2:?Repo name is required!}

    echo "https://github.com/$ORG/$REPO_NAME/actions"
}

_gtb_push_to_student_repo() {
    local ORG=${1:?Org is required!}
    local REPO_NAME=${2:?Repo name is required!}

    cd $(_gtb_default_repo_dir $REPO_NAME)

    run "git push $ORG origin/master:refs/heads/master"
    run "git push --force $ORG origin/master:refs/heads/latest"
}

_gtb_remove_remote_student_repo() {
    local ORG=${1:?Org is required!}
    local REPO_NAME=${2:?Repo name is required!}

    cd $(_gtb_default_repo_dir $REPO_NAME)

    if ! git remote | grep --silent "$ORG"; then
        return 0
    fi

    run "git remote remove $ORG 2>/dev/null"
}

_gtb_add_student_repo_as_remote() {
    local ORG=${1:?Org is required!}
    local REPO_NAME=${2:?Repo name is required!}

    cd $(_gtb_default_repo_dir $REPO_NAME)

    if git remote | grep --silent "$ORG"; then
        return 0
    fi

    local repo_url="git@github.com:$ORG/${REPO_NAME}.git"
    run "git remote add $ORG $repo_url"
}

_gtb_create_repo_in_student_org() {
    local ORG=${1:?Org is required!}
    local REPO_NAME=${2:?Repo name is required!}

    cd $(_gtb_default_repo_dir $REPO_NAME)

    if git remote | grep --silent "$ORG"; then
        return 0
    fi

    gh_create_org_repo $ORG $REPO_NAME
    local result=$?
    if [[ $result -ne 0 ]]; then
        error "Failed to create repo '$REPO_NAME' in '$ORG'."
        return $result
    fi

    _gtb_add_student_repo_as_remote $ORG $REPO_NAME
}

_gtb_clone_default_repo() {
    local REPO_NAME=${1:?Repo name is required!}
    local repo_dir=$(_gtb_default_repo_dir $REPO_NAME)

    [[ -d $repo_dir ]] || gh_clone_repo tws-graduate-program $REPO_NAME $repo_dir
}

_gtb_update_default_repo() {
    local REPO_NAME=${1:?Repo name is required!}
    local repo_dir=$(_gtb_default_repo_dir $REPO_NAME)

    run "cd $repo_dir"
    run "git fetch origin"
}

_gtb_repo_publish() {
    local REPO_NAME=$1
    shift

    header "Preparing local default repo $REPO_NAME..."

    _gtb_clone_default_repo $REPO_NAME
    if [[ $? -ne 0 ]]; then
        fail "Failed to clone default repo '$REPO_NAME'."
    fi

    _gtb_update_default_repo $REPO_NAME
    if [[ $? -ne 0 ]]; then
        fail "Failed to update default repo '$REPO_NAME'."
    fi

    while read -r FULLNAME ORG TERM_NAME TAGS
    do
        if echo "$TERM_NAME" | grep --silent "$GTB_TERM"
        then
            if [[ -z "$*" ]] || echo "$*" | grep --silent "\<${FULLNAME}\>" || echo "$*" | grep --silent "\<${ORG}\>" || echo "$TAGS" | grep --silent "\<$1\>"
            then
                echo
                header "Publish repo $REPO_NAME to $ORG..."
                _gtb_create_repo_in_student_org $ORG $REPO_NAME || continue
                gh_init_repo_secrets $ORG $REPO_NAME $TERM_NAME $FULLNAME
                _gtb_push_to_student_repo $ORG $REPO_NAME
            fi
        fi
    done < $GTB_STUDENTS_FILE
}

_gtb_repo_remove() {
    local ORG=${1:?Organization is required!}
    shift
    local TEAM=${1:?Team is required!}
    shift

    if [[ -p /dev/stdin ]]
    then
        while read line
        do
            for repo in $line
            do
                remove_repo_from_team $ORG $TEAM $repo
            done
        done
    fi


    for repo in $@
    do
        remove_repo_from_team $ORG $TEAM $repo
    done
}

add_repo_to_team() {
    local ORG=$1
    local TEAM=$2
    local REPO=$3
    local ENDPOINT="/orgs/$ORG/teams/$TEAM/repos/$ORG/$REPO"

    run "gh api --silent -X PUT $ENDPOINT -F permission='pull'"

    [[ $? -eq 0 ]] && info "DONE" || error "FAILED"
}

_gtb_repo_add() {
    local ORG=${1:?Organization is required!}
    shift
    local TEAM=${1:?Team is required!}
    shift

    if [[ -p /dev/stdin ]]
    then
        while read line
        do
            for repo in $line
            do
                add_repo_to_team $ORG $TEAM $repo
            done
        done
    fi


    for repo in $@
    do
        add_repo_to_team $ORG $TEAM $repo
    done
}

_gtb_repo_list() {
    gh_list_org_repos "$@"
}

_gtb_repo() {
    _gtb_run_subcommand ${FUNCNAME[0]#_gtb_} "$@"
}

_gtb_comments() {
    local GTB_TMP_COMMENTS_FILE="/tmp/gtb-comments.md"
    local GTB_COMMENTS_FILE="gtb-comments.md"

    extract_and_format_comments > $GTB_TMP_COMMENTS_FILE
    strip_blank_details_block $GTB_TMP_COMMENTS_FILE | tee $GTB_COMMENTS_FILE | tee /dev/tty | pbcopy
}

_gtb_check() {
    assert_students_file_exists

    GITHUB_USERNAME="${GITHUB_USERNAME:?GITHUB_USERNAME should be set!}"
    GITHUB_TOKEN="${GITHUB_TOKEN:?GITHUB_TOKEN should be set!}"

    while read -r FULLNAME USERNAME TERM_NAME TAGS
    do
        if echo "$TERM_NAME" | grep --silent "$GTB_TERM"
        then
            if [[ -z "$*" ]] || echo "$@" | grep --silent "\<${FULLNAME}\>" || echo "$TAGS" | grep --silent "\<$1\>"
            then
                if gh api "/users/$USERNAME" | jsonpp | grep --silent "\"login\": \"$USERNAME\""
                then
                    info "$TERM_NAME $FULLNAME $USERNAME"
                else
                    error "$TERM_NAME $FULLNAME $USERNAME"
                fi
            fi
        fi
    done < $GTB_STUDENTS_FILE
}

_gtb_up() {
    local REPO_NAME=${1:?Repo name is required! (e.g. B-spring-config-homework, F-jest-homework, etc.)}
    local FULLNAME=${2:?Trainee name is required! (e.g. zhang.san, li.si, etc.)}
    local HOMEWORK_ROOT="$GTB_ROOT/$GTB_TERMS_DIR/$GTB_TERM/$REPO_NAME/$FULLNAME"
    local HOMEWORK_TESTS_ROOT="$GTB_ROOT/${REPO_NAME}-ac"
    local DOCKER_ERROR_LOG_FILE='/tmp/docker_error.log'

    [[ -d $HOMEWORK_ROOT ]] || fail "Cannot find homework: $HOMEWORK_ROOT"
    [[ -d $HOMEWORK_TESTS_ROOT ]] || fail "Cannot find homework tests: $HOMEWORK_TESTS_ROOT"

    prepare_run_context "$HOMEWORK_ROOT" "$HOMEWORK_TESTS_ROOT" "$REPO_NAME"

    info "Start starting up..."
    cd "$HOMEWORK_ROOT"
    run "./gradlew build -x test && docker-compose up -d --build --remove-orphans"
    if [[ "$?" -ne 0 ]]; then
        error "Application startup failed!"
        clear_run_context "$HOMEWORK_ROOT"
        exit 1
    fi

    info "Start waiting application ready..."
    ensure_application_is_ready 60
    if [[ $? -ne 0 ]]; then
        docker-compose logs -f app > "$DOCKER_ERROR_LOG_FILE"
        error "Application fail to be ready! See the error log at file: ${DOCKER_ERROR_LOG_FILE}"
        clear_run_context "$HOMEWORK_ROOT"

        _gtb_down "$@"
        exit 1
    fi

    info "Application is ready!"
    clear_run_context "$HOMEWORK_ROOT"

    if [[ "$AUTO_TEST" == "true" ]]; then
        _gtb_test "$@"
        _gtb_down "$@"
    fi
}

_gtb_down() {
    local REPO_NAME=${1:?Repo name is required! (e.g. B-spring-config-homework, F-jest-homework, etc.)}
    local FULLNAME=${2:?Trainee name is required! (e.g. zhang.san, li.si, etc.)}
    local HOMEWORK_ROOT="$GTB_ROOT/$GTB_TERMS_DIR/$GTB_TERM/$REPO_NAME/$FULLNAME"
    local HOMEWORK_TESTS_ROOT="$GTB_ROOT/${REPO_NAME}-ac"

    [[ -d $HOMEWORK_ROOT ]] || fail "Cannot find homework: $HOMEWORK_ROOT"
    [[ -d $HOMEWORK_TESTS_ROOT ]] || fail "Cannot find homework tests: $HOMEWORK_TESTS_ROOT"

    prepare_run_context "$HOMEWORK_ROOT" "$HOMEWORK_TESTS_ROOT" "$REPO_NAME"

    info "Start shutting down..."
    cd "$HOMEWORK_ROOT"
    if [[ `docker-compose ps -q | wc -l` -ne 0 ]]; then
        run "docker-compose down --rmi local"
    else
        error "Application not startup yet!"
    fi

    clear_run_context "$HOMEWORK_ROOT"
}

_gtb_test() {
    local REPO_NAME=${1:?Repo name is required! (e.g. B-spring-config-homework, F-jest-homework, etc.)}
    local FULLNAME=${2:?Trainee name is required! (e.g. zhang.san, li.si, etc.)}
    local HOMEWORK_ROOT="$GTB_ROOT/$GTB_TERMS_DIR/$GTB_TERM/$REPO_NAME/$FULLNAME"
    local HOMEWORK_TESTS_ROOT="$GTB_ROOT/${REPO_NAME}-ac"
    local TEST_OUTPUT_FILE='/tmp/gtb_gradle_test_output.log'

    [[ -d $HOMEWORK_ROOT ]] || fail "Cannot find homework: $HOMEWORK_ROOT"
    [[ -d $HOMEWORK_TESTS_ROOT ]] || fail "Cannot find homework tests: $HOMEWORK_TESTS_ROOT"

    info "Start running acceptance tests..."
    ( cd $HOMEWORK_TESTS_ROOT && \
        run "./gradlew --rerun-tasks test < /dev/null" | \
        tee /dev/tty | \
        strip_colors > $TEST_OUTPUT_FILE )

    echo
    info "Start generating test results..."
    for f in $(cat $TEST_OUTPUT_FILE | grep 'Test _'  | cut -d'_' -f2 | sort -u)
    do
        echo $f
        echo '======='
        cat $TEST_OUTPUT_FILE | grep $f | cut -d'_' -f3 | sed -e 's/^/* /' -e 's/ PASSED//'
        echo
    done | tee $HOMEWORK_ROOT/gtb-test-results.md | grep --color -E 'FAILED|$'
}

_gtb_join() {
    assert_students_file_exists

    REPO_NAME=${1:?Repo name is required! (e.g. B-spring-config-homework, F-jest-homework, etc.)}
    shift

    join_repos $@
}

_gtb_build() {
    assert_students_file_exists

    AUTO_BUILD="true"
    REPO_NAME=${1:?Repo name is required! (e.g. B-spring-config-homework, F-jest-homework, etc.)}
    shift

    build_repos $@
}

_gtb_update() {
    assert_students_file_exists

    AUTO_UPDATE="true"
    REPO_NAME=${1:?Repo name is required! (e.g. B-spring-config-homework, F-jest-homework, etc.)}
    shift

    clone_or_update_repos $@
    build_repos $@
}

_gtb_clone() {
    assert_students_file_exists

    REPO_NAME=${1:?Repo name is required! (e.g. B-spring-config-homework, F-jest-homework, etc.)}
    shift

    clone_or_update_repos $@
    build_repos $@
}

_gtb_show() {
    assert_students_file_exists

    GITHUB_USERNAME="${GITHUB_USERNAME:?GITHUB_USERNAME should be set!}"
    GITHUB_TOKEN="${GITHUB_TOKEN:?GITHUB_TOKEN should be set!}"

    REPO_NAME=${1:?Repo name is required! (e.g. B-spring-config-homework, F-jest-homework, etc.)}
    shift

    while read -r FULLNAME USERNAME TERM_NAME TAGS
    do
        if echo "$TERM_NAME" | grep --silent "$GTB_TERM"
        then
            if [[ -z "$*" ]] || echo "$@" | grep --silent "\<${FULLNAME}\>" || echo "$TAGS" | grep --silent "\<$1\>"
            then
                if curl -s -u $GITHUB_USERNAME:$GITHUB_TOKEN "https://api.github.com/repos/$USERNAME/$REPO_NAME" | tac | tac | grep --silent "\"name\": \"$REPO_NAME\""
                then
                    info "$TERM_NAME $FULLNAME $USERNAME"
                else
                    error "$TERM_NAME $FULLNAME $USERNAME"
                fi
            fi
        fi
    done < $GTB_STUDENTS_FILE
}

_gtb_init() {
    mkdir -p $GTB_ROOT/$GTB_REPOS_DIR
    mkdir -p $GTB_ROOT/$GTB_TERMS_DIR

    if [[ ! -f $GTB_TRAINERS_FILE ]]
    then
        touch $GTB_TRAINERS_FILE
        info "Created trainers file: '$GTB_TRAINERS_FILE'."
    fi

    if [[ ! -f $GTB_STUDENTS_FILE ]]
    then
        touch $GTB_STUDENTS_FILE
        info "Created students file: '$GTB_STUDENTS_FILE'."
    fi
}

_gtb_help() {
    echo "Please refer to the README doc:"
    info "https://github.com/GTB-training/util/blob/master/README.md"
    exit 0
}

# main method starts from here...
if [[ "$(type -t ${SUBCMD_PREFIX}_$SUBCOMMAND)" != 'function' ]]; then
    error "Subcommand \`$SUBCOMMAND\` is INVALID!"
    exit 2
fi

OPTIND=1

AUTO_UPDATE="false"
AUTO_BUILD="false"
AUTO_ACCEPT="true"
AUTO_TEST="false"
CHECK_ROLE_ONLY="false"

while :; do
    case $1 in
        -u|--update)
            AUTO_UPDATE="true"
            ;;
        -b|--build)
            AUTO_BUILD="true"
            ;;
        -l|--list)
            AUTO_ACCEPT="false"
            ;;
        -t|--test)
            AUTO_TEST="true"
            ;;
        --role)
            CHECK_ROLE_ONLY="true"
            ;;
        --)
            shift
            break
            ;;
        -?*)
            error "WARN: Unknown option (ignored): $1"
            ;;
        *)               # Default case: No more options, so break out of the loop.
            break
    esac

    shift
done

${SUBCMD_PREFIX}_${SUBCOMMAND} $@

