#!/bin/bash

GTB_ROOT="${GTB_ROOT:-$HOME/code/gtb}"
GTB_TERM="${GTB_TERM:?GTB_TERM should be set! (term01, term02, etc.)}"
GTB_STUDENTS_FILE="${GTB_STUDENTS_FILE:-$GTB_ROOT/students.txt}"
GTB_EXCLUDE_DIRS=( --exclude-dir '.git' --exclude-dir 'build' --exclude-dir 'gradle' --exclude-dir 'node_modules' --exclude-dir 'dist' --exclude-dir '.cache' )
SUBCMD_PREFIX='_gtb'

SUBCOMMAND=${1:?Subcommand is required! (e.g. init, clone, build, update, join, ac, up, down, check, show, help.)}
shift

info() {
    echo "$(tput setaf 4)$(tput bold)$*$(tput sgr 0)"
}

warn() {
    echo "$(tput setaf 3)$(tput bold)$*$(tput sgr 0)"
}

error() {
    echo "$(tput setaf 1)$(tput bold)$*$(tput sgr 0)" >&2
}

debug() {
    echo "$(tput setaf 5)$(tput bold)$*$(tput sgr 0)"
}

run() {
    echo "$(tput setaf 2)$*$(tput sgr 0)"
    eval $*
}

fail() {
    error $*
    exit 1
}

strip_colors() {
    while read -r line
    do
        echo "$line" | \
            sed $'s,\x1b\\[[0-9;]*[a-zA-Z],,g'
    done
}

build_repo() {
    local repo_name=$1
    local fullname=$2
    local term_name=$3
    local HOMEWORK_ROOT="$GTB_ROOT/$term_name/$repo_name"
    local STUDENT_HOMEWORK_PATH="$HOMEWORK_ROOT/$fullname"

    if [[ ! -d $STUDENT_HOMEWORK_PATH ]]
    then
        error "Skip building repo \`$STUDENT_HOMEWORK_PATH\` due to folder is not exist!"
        return
    fi

    run "cd $STUDENT_HOMEWORK_PATH"

    if [[ -f "package.json" ]]; then
        run "yarn"
    elif [[ -f "build.gradle" ]]; then
        run "./gradlew build </dev/null"
    else
        error "Failed to build project due to unknown build tool!"
    fi
}

clone_repo() {
    local repo_name=$1
    local username=$2
    local fullname=$3
    local term_name=$4
    local HOMEWORK_ROOT="$GTB_ROOT/$term_name/$repo_name"
    local STUDENT_HOMEWORK_PATH="$HOMEWORK_ROOT/$fullname"
    local STUDENT_HOMEWORK_URL="git@github.com:${username}/${repo_name}.git"

    [[ -d $HOMEWORK_ROOT ]] || run "mkdir -p $HOMEWORK_ROOT"

    run "git clone $STUDENT_HOMEWORK_URL $STUDENT_HOMEWORK_PATH"

    if (($?))
    then
        error "Failed to clone repo ${repo_name}.git for student $fullname!"
    fi
}

update_repo() {
    local student_homework_path=$1

    run "cd $student_homework_path"
    run "git pull --rebase"

    if (($?))
    then
        error "Failed to update repo ${student_homework_path}!"
    fi
}

clone_or_update_repo() {
    local repo_name=$1
    local fullname=$3
    local term_name=$4
    local HOMEWORK_ROOT="$GTB_ROOT/$term_name/$repo_name"
    local STUDENT_HOMEWORK_PATH="$HOMEWORK_ROOT/$fullname"

    if [[ -d $STUDENT_HOMEWORK_PATH ]] && [[ "$AUTO_UPDATE" == "true" ]]
    then
        update_repo $STUDENT_HOMEWORK_PATH
    elif [[ -d $STUDENT_HOMEWORK_PATH ]] && [[ "$AUTO_UPDATE" != "true" ]]
    then
        info "Repo ${repo_name} for student $fullname has already been downloaded."
    else
        clone_repo $@
    fi
}

join_repos() {
    readonly INVITATIONS_FILE="/tmp/gtb_invatations_${REPO_NAME}.txt"

    gh api '/user/repository_invitations?per_page=100' | jsonpp | \
        grep --color=never '^    "id":\|^      "name":\|^        "login":' | \
        paste -d' ' - - - | \
        tr -d ', :' | tr -s '"' | tr '"' ' ' | \
        grep --color=never "${REPO_NAME}" > $INVITATIONS_FILE

    readonly login_list_size=$(cat $INVITATIONS_FILE | wc -l | tr -d ' ')

    if [[ 0 -eq $login_list_size ]]
    then
        info "Found $login_list_size invitations for repo ${REPO_NAME}."
        return
    fi

    info "Found $login_list_size invitations for repo ${REPO_NAME} from following users:"
    cat $INVITATIONS_FILE | cut -d' ' -f7 | \
        xargs -I % grep '\<%\>' $GTB_STUDENTS_FILE | \
        cut -d' ' -f1-2 | sort | cat -n

    if [[ "$AUTO_ACCEPT" == "false" ]]
    then
        return
    fi

    while read -r cid id cname name clogin login
    do
        info "about to accept invitation from user ${login}..."
        run "gh api -X PATCH --silent /user/repository_invitations/${id}"

        [[ $? -eq 0 ]] && info "DONE" || error "FAILED"
    done < $INVITATIONS_FILE
}

build_repos() {
    if [[ "$AUTO_BUILD" != "true" ]]
    then
        return
    fi

    while read -r FULLNAME USERNAME TERM_NAME TAGS
    do
        if echo "$TERM_NAME" | grep --silent "$GTB_TERM"
        then
            if [[ -z "$*" ]] || echo "$@" | grep --silent "\<${FULLNAME}\>" || echo "$TAGS" | grep --silent "\<$1\>"
            then
                build_repo $REPO_NAME $FULLNAME $TERM_NAME
            fi
        fi
    done < $GTB_STUDENTS_FILE
}

clone_or_update_repos() {
    while read -r FULLNAME USERNAME TERM_NAME TAGS
    do
        if echo "$TERM_NAME" | grep --silent "$GTB_TERM"
        then
            if [[ -z "$*" ]] || echo "$@" | grep --silent "\<${FULLNAME}\>" || echo "$TAGS" | grep --silent "\<$1\>"
            then
                clone_or_update_repo $REPO_NAME $USERNAME $FULLNAME $TERM_NAME
            fi
        fi
    done < $GTB_STUDENTS_FILE
}

assert_students_file_exists() {
    if [[ ! -f $GTB_STUDENTS_FILE ]]
    then
        error "Cannot find students file: '$GTB_STUDENTS_FILE'."
        exit 1
    fi
}

extract_comment_context() {
    while read -r line
    do
        echo "$line" | \
            sed 's:^.*TODO ::' | \
            sed 's: \{0,\}-->$::' | \
            sed 's: \{0,\}\*/}$::' | \
            sed 's: \{0,\}\*/$::' | \
            cut -d' ' -f2-
    done
}

extract_summary_comments_for_dimension() {
    local DIMENSION=${1:?dimension code is required!}
    grep "TODO GTB-\(${DIMENSION}\): \*" -R ${GTB_EXCLUDE_DIRS[@]} * | \
        extract_comment_context
}

extract_detail_comments_for_dimension() {
    local DIMENSION=${1:?dimension code is required!}
    local SYMBOL=${2:?symbol is required!}

    grep "TODO GTB-\(${DIMENSION}\): ${SYMBOL}" -R ${GTB_EXCLUDE_DIRS[@]} * | \
        extract_comment_context | \
        sed "s:^:${SYMBOL} \\\\:"
}

_gtb_comments() {
    local GTB_COMMENTS_FILE="gtb-comments.md"
    cat <<-EOF | tee $GTB_COMMENTS_FILE
### 完成度：
$(extract_summary_comments_for_dimension '1\|完成度')
$([ -f ./gtb-test-results.md ] && echo '* 具体验收测试结果详见：`gtb-test-results.md`')

__Details:__
$(extract_detail_comments_for_dimension '1\|完成度' '+')
$(extract_detail_comments_for_dimension '1\|完成度' '-')

### 测试：
$(extract_summary_comments_for_dimension '2\|测试')

__Details:__
$(extract_detail_comments_for_dimension '2\|测试' '+')
$(extract_detail_comments_for_dimension '2\|测试' '-')

### 知识点：
$(extract_summary_comments_for_dimension '3\|知识点')

__Details:__
$(extract_detail_comments_for_dimension '3\|知识点' '+')
$(extract_detail_comments_for_dimension '3\|知识点' '-')

### 工程实践：
$(extract_summary_comments_for_dimension '4\|工程实践')

__Details:__
$(extract_detail_comments_for_dimension '4\|工程实践' '+')
$(extract_detail_comments_for_dimension '4\|工程实践' '-')

### 综合：
$(extract_summary_comments_for_dimension '0\|综合')

__Details:__
$(extract_detail_comments_for_dimension '0\|综合' '+')
$(extract_detail_comments_for_dimension '0\|综合' '-')

EOF
}

_gtb_check() {
    assert_students_file_exists

    GITHUB_USERNAME="${GITHUB_USERNAME:?GITHUB_USERNAME should be set!}"
    GITHUB_TOKEN="${GITHUB_TOKEN:?GITHUB_TOKEN should be set!}"

    while read -r FULLNAME USERNAME TERM_NAME TAGS
    do
        if echo "$TERM_NAME" | grep --silent "$GTB_TERM"
        then
            if [[ -z "$*" ]] || echo "$@" | grep --silent "\<${FULLNAME}\>" || echo "$TAGS" | grep --silent "\<$1\>"
            then
                if curl -s -u $GITHUB_USERNAME:$GITHUB_TOKEN "https://api.github.com/users/$USERNAME" | tac | tac | grep --silent "\"login\": \"$USERNAME\""
                then
                    info "$TERM_NAME $FULLNAME $USERNAME"
                else
                    error "$TERM_NAME $FULLNAME $USERNAME"
                fi
            fi
        fi
    done < $GTB_STUDENTS_FILE
}

_gtb_up() {
    local REPO_NAME=${1:?Repo name is required! (e.g. B-spring-config-homework, F-jest-homework, etc.)}
    local FULLNAME=${2:?Trainee name is required! (e.g. zhang.san, li.si, etc.)}
    local HOMEWORK_ROOT="$GTB_ROOT/$GTB_TERM/$REPO_NAME/$FULLNAME"
    local HOMEWORK_TESTS_ROOT="$GTB_ROOT/${REPO_NAME}-ac"

    [[ -d $HOMEWORK_ROOT ]] || fail "Cannot find homework: $HOMEWORK_ROOT"
    [[ -d $HOMEWORK_TESTS_ROOT ]] || fail "Cannot find homework tests: $HOMEWORK_TESTS_ROOT"

    cd "$HOMEWORK_ROOT"
    run "cp $HOMEWORK_TESTS_ROOT/docker/* ."
    run "cp settings.gradle settings.gradle.backup"
    run $'echo "rootProject.name = \'gtb-quiz\'" > settings.gradle'
    run "./gradlew build -x test"
    run "docker-compose up -d --build"
    echo "waiting..."

    while :; do
        sleep 1
        curl http://localhost:8080 > /dev/null 2>&1
        if [[ $? == "0" ]]
        then
            echo "fully up"
            break
        fi
    done

    run "rm application-docker.properties"
    run "rm wait-for-it.sh"
    run "rm Dockerfile"
    run "rm docker-compose.yml"
    run "mv settings.gradle.backup settings.gradle"
}

_gtb_down() {
    local REPO_NAME=${1:?Repo name is required! (e.g. B-spring-config-homework, F-jest-homework, etc.)}
    local FULLNAME=${2:?Trainee name is required! (e.g. zhang.san, li.si, etc.)}
    local HOMEWORK_ROOT="$GTB_ROOT/$GTB_TERM/$REPO_NAME/$FULLNAME"
    local HOMEWORK_TESTS_ROOT="$GTB_ROOT/${REPO_NAME}-ac"

    [[ -d $HOMEWORK_ROOT ]] || fail "Cannot find homework: $HOMEWORK_ROOT"
    [[ -d $HOMEWORK_TESTS_ROOT ]] || fail "Cannot find homework tests: $HOMEWORK_TESTS_ROOT"

    cd "$HOMEWORK_ROOT"
    run "cp $HOMEWORK_TESTS_ROOT/docker/* ."
    run "cp settings.gradle settings.gradle.backup"

    run "docker-compose down"
    run "docker rmi gtb-quiz:1.0"

    run "rm application-docker.properties"
    run "rm wait-for-it.sh"
    run "rm Dockerfile"
    run "rm docker-compose.yml"
    run "mv settings.gradle.backup settings.gradle"
}

_gtb_test() {
    local REPO_NAME=${1:?Repo name is required! (e.g. B-spring-config-homework, F-jest-homework, etc.)}
    local FULLNAME=${2:?Trainee name is required! (e.g. zhang.san, li.si, etc.)}
    local HOMEWORK_ROOT="$GTB_ROOT/$GTB_TERM/$REPO_NAME/$FULLNAME"
    local HOMEWORK_TESTS_ROOT="$GTB_ROOT/${REPO_NAME}-ac"
    local TEST_OUTPUT_FILE='/tmp/gtb_gradle_test_output.log'

    [[ -d $HOMEWORK_ROOT ]] || fail "Cannot find homework: $HOMEWORK_ROOT"
    [[ -d $HOMEWORK_TESTS_ROOT ]] || fail "Cannot find homework tests: $HOMEWORK_TESTS_ROOT"

    info "Start running acceptance tests..."
    ( cd $HOMEWORK_TESTS_ROOT && \
        run "./gradlew --rerun-tasks test < /dev/null" | \
        tee /dev/tty | \
        strip_colors > $TEST_OUTPUT_FILE )

    echo
    info "Start generating test results..."
    for f in $(cat $TEST_OUTPUT_FILE | grep 'Test _'  | cut -d'_' -f2 | sort -u)
    do
        echo $f
        echo '======='
        cat $TEST_OUTPUT_FILE | grep $f | cut -d'_' -f3 | sed -e 's/^/* /' -e 's/ PASSED//'
        echo
    done | tee $HOMEWORK_ROOT/gtb-test-results.md
}

_gtb_join() {
    assert_students_file_exists

    REPO_NAME=${1:?Repo name is required! (e.g. B-spring-config-homework, F-jest-homework, etc.)}
    shift

    join_repos $@
}

_gtb_build() {
    assert_students_file_exists

    AUTO_BUILD="true"
    REPO_NAME=${1:?Repo name is required! (e.g. B-spring-config-homework, F-jest-homework, etc.)}
    shift

    build_repos $@
}

_gtb_update() {
    assert_students_file_exists

    AUTO_UPDATE="true"
    REPO_NAME=${1:?Repo name is required! (e.g. B-spring-config-homework, F-jest-homework, etc.)}
    shift

    clone_or_update_repos $@
    build_repos $@
}

_gtb_clone() {
    assert_students_file_exists

    REPO_NAME=${1:?Repo name is required! (e.g. B-spring-config-homework, F-jest-homework, etc.)}
    shift

    clone_or_update_repos $@
    build_repos $@
}

_gtb_show() {
    assert_students_file_exists

    GITHUB_USERNAME="${GITHUB_USERNAME:?GITHUB_USERNAME should be set!}"
    GITHUB_TOKEN="${GITHUB_TOKEN:?GITHUB_TOKEN should be set!}"

    REPO_NAME=${1:?Repo name is required! (e.g. B-spring-config-homework, F-jest-homework, etc.)}
    shift

    while read -r FULLNAME USERNAME TERM_NAME TAGS
    do
        if echo "$TERM_NAME" | grep --silent "$GTB_TERM"
        then
            if [[ -z "$*" ]] || echo "$@" | grep --silent "\<${FULLNAME}\>" || echo "$TAGS" | grep --silent "\<$1\>"
            then
                if curl -s -u $GITHUB_USERNAME:$GITHUB_TOKEN "https://api.github.com/repos/$USERNAME/$REPO_NAME" | tac | tac| grep --silent "\"name\": \"$REPO_NAME\""
                then
                    info "$TERM_NAME $FULLNAME $USERNAME"
                else
                    error "$TERM_NAME $FULLNAME $USERNAME"
                fi
            fi
        fi
    done < $GTB_STUDENTS_FILE
}

_gtb_init() {
    if [[ ! -f $GTB_STUDENTS_FILE ]]
    then
        mkdir -p $GTB_ROOT
        touch $GTB_STUDENTS_FILE
        info "Created students file: '$GTB_STUDENTS_FILE'."
    fi
}

_gtb_help() {
    echo "Please refer to the README doc:"
    info "https://github.com/GTB-training/util/blob/master/README.md"
    exit 0
}

# main method starts from here...
if [[ "$(type -t ${SUBCMD_PREFIX}_$SUBCOMMAND)" != 'function' ]]; then
    error "Subcommand \`$SUBCOMMAND\` is INVALID!"
    exit 2
fi

OPTIND=1

AUTO_UPDATE="false"
AUTO_BUILD="false"
AUTO_ACCEPT="true"

while :; do
    case $1 in
        -u|--update)
            AUTO_UPDATE="true"
            ;;
        -b|--build)
            AUTO_BUILD="true"
            ;;
        -l|--list)
            AUTO_ACCEPT="false"
            ;;
        --)
            shift
            break
            ;;
        -?*)
            error "WARN: Unknown option (ignored): $1"
            ;;
        *)               # Default case: No more options, so break out of the loop.
            break
    esac

    shift
done

${SUBCMD_PREFIX}_${SUBCOMMAND} $@

